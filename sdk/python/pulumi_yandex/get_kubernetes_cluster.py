# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetKubernetesClusterResult',
    'AwaitableGetKubernetesClusterResult',
    'get_kubernetes_cluster',
    'get_kubernetes_cluster_output',
]

@pulumi.output_type
class GetKubernetesClusterResult:
    """
    A collection of values returned by getKubernetesCluster.
    """
    def __init__(__self__, cluster_id=None, cluster_ipv4_range=None, cluster_ipv6_range=None, created_at=None, description=None, folder_id=None, health=None, id=None, kms_providers=None, labels=None, log_group_id=None, masters=None, name=None, network_id=None, network_implementations=None, network_policy_provider=None, node_ipv4_cidr_mask_size=None, node_service_account_id=None, release_channel=None, service_account_id=None, service_ipv4_range=None, service_ipv6_range=None, status=None):
        if cluster_id and not isinstance(cluster_id, str):
            raise TypeError("Expected argument 'cluster_id' to be a str")
        pulumi.set(__self__, "cluster_id", cluster_id)
        if cluster_ipv4_range and not isinstance(cluster_ipv4_range, str):
            raise TypeError("Expected argument 'cluster_ipv4_range' to be a str")
        pulumi.set(__self__, "cluster_ipv4_range", cluster_ipv4_range)
        if cluster_ipv6_range and not isinstance(cluster_ipv6_range, str):
            raise TypeError("Expected argument 'cluster_ipv6_range' to be a str")
        pulumi.set(__self__, "cluster_ipv6_range", cluster_ipv6_range)
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        pulumi.set(__self__, "created_at", created_at)
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        pulumi.set(__self__, "description", description)
        if folder_id and not isinstance(folder_id, str):
            raise TypeError("Expected argument 'folder_id' to be a str")
        pulumi.set(__self__, "folder_id", folder_id)
        if health and not isinstance(health, str):
            raise TypeError("Expected argument 'health' to be a str")
        pulumi.set(__self__, "health", health)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if kms_providers and not isinstance(kms_providers, list):
            raise TypeError("Expected argument 'kms_providers' to be a list")
        pulumi.set(__self__, "kms_providers", kms_providers)
        if labels and not isinstance(labels, dict):
            raise TypeError("Expected argument 'labels' to be a dict")
        pulumi.set(__self__, "labels", labels)
        if log_group_id and not isinstance(log_group_id, str):
            raise TypeError("Expected argument 'log_group_id' to be a str")
        pulumi.set(__self__, "log_group_id", log_group_id)
        if masters and not isinstance(masters, list):
            raise TypeError("Expected argument 'masters' to be a list")
        pulumi.set(__self__, "masters", masters)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if network_id and not isinstance(network_id, str):
            raise TypeError("Expected argument 'network_id' to be a str")
        pulumi.set(__self__, "network_id", network_id)
        if network_implementations and not isinstance(network_implementations, list):
            raise TypeError("Expected argument 'network_implementations' to be a list")
        pulumi.set(__self__, "network_implementations", network_implementations)
        if network_policy_provider and not isinstance(network_policy_provider, str):
            raise TypeError("Expected argument 'network_policy_provider' to be a str")
        pulumi.set(__self__, "network_policy_provider", network_policy_provider)
        if node_ipv4_cidr_mask_size and not isinstance(node_ipv4_cidr_mask_size, int):
            raise TypeError("Expected argument 'node_ipv4_cidr_mask_size' to be a int")
        pulumi.set(__self__, "node_ipv4_cidr_mask_size", node_ipv4_cidr_mask_size)
        if node_service_account_id and not isinstance(node_service_account_id, str):
            raise TypeError("Expected argument 'node_service_account_id' to be a str")
        pulumi.set(__self__, "node_service_account_id", node_service_account_id)
        if release_channel and not isinstance(release_channel, str):
            raise TypeError("Expected argument 'release_channel' to be a str")
        pulumi.set(__self__, "release_channel", release_channel)
        if service_account_id and not isinstance(service_account_id, str):
            raise TypeError("Expected argument 'service_account_id' to be a str")
        pulumi.set(__self__, "service_account_id", service_account_id)
        if service_ipv4_range and not isinstance(service_ipv4_range, str):
            raise TypeError("Expected argument 'service_ipv4_range' to be a str")
        pulumi.set(__self__, "service_ipv4_range", service_ipv4_range)
        if service_ipv6_range and not isinstance(service_ipv6_range, str):
            raise TypeError("Expected argument 'service_ipv6_range' to be a str")
        pulumi.set(__self__, "service_ipv6_range", service_ipv6_range)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> str:
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterIpv4Range")
    def cluster_ipv4_range(self) -> str:
        """
        IP range for allocating pod addresses.
        """
        return pulumi.get(self, "cluster_ipv4_range")

    @property
    @pulumi.getter(name="clusterIpv6Range")
    def cluster_ipv6_range(self) -> str:
        """
        Identical to cluster_ipv4_range but for the IPv6 protocol.
        """
        return pulumi.get(self, "cluster_ipv6_range")

    @property
    @pulumi.getter(name="createdAt")
    def created_at(self) -> str:
        """
        The Kubernetes cluster creation timestamp.
        """
        return pulumi.get(self, "created_at")

    @property
    @pulumi.getter
    def description(self) -> str:
        """
        A description of the Kubernetes cluster.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> str:
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def health(self) -> str:
        """
        Health of the Kubernetes cluster.
        """
        return pulumi.get(self, "health")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="kmsProviders")
    def kms_providers(self) -> Sequence['outputs.GetKubernetesClusterKmsProviderResult']:
        """
        cluster KMS provider parameters.
        """
        return pulumi.get(self, "kms_providers")

    @property
    @pulumi.getter
    def labels(self) -> Mapping[str, str]:
        """
        A set of key/value label pairs to assign to the Kubernetes cluster.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter(name="logGroupId")
    def log_group_id(self) -> str:
        """
        Log group where cluster stores cluster system logs, like audit, events, or controlplane logs.
        """
        return pulumi.get(self, "log_group_id")

    @property
    @pulumi.getter
    def masters(self) -> Sequence['outputs.GetKubernetesClusterMasterResult']:
        """
        Kubernetes master configuration options. The structure is documented below.
        """
        return pulumi.get(self, "masters")

    @property
    @pulumi.getter
    def name(self) -> str:
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="networkId")
    def network_id(self) -> str:
        """
        The ID of the cluster network.
        """
        return pulumi.get(self, "network_id")

    @property
    @pulumi.getter(name="networkImplementations")
    def network_implementations(self) -> Sequence['outputs.GetKubernetesClusterNetworkImplementationResult']:
        """
        (Optional) Network Implementation options. The structure is documented below.
        """
        return pulumi.get(self, "network_implementations")

    @property
    @pulumi.getter(name="networkPolicyProvider")
    def network_policy_provider(self) -> str:
        """
        Network policy provider for the cluster, if present. Possible values: `CALICO`.
        """
        return pulumi.get(self, "network_policy_provider")

    @property
    @pulumi.getter(name="nodeIpv4CidrMaskSize")
    def node_ipv4_cidr_mask_size(self) -> int:
        """
        Size of the masks that are assigned to each node in the cluster.
        """
        return pulumi.get(self, "node_ipv4_cidr_mask_size")

    @property
    @pulumi.getter(name="nodeServiceAccountId")
    def node_service_account_id(self) -> str:
        """
        Service account to be used by the worker nodes of the Kubernetes cluster
        to access Container Registry or to push node logs and metrics.
        """
        return pulumi.get(self, "node_service_account_id")

    @property
    @pulumi.getter(name="releaseChannel")
    def release_channel(self) -> str:
        """
        Cluster release channel.
        """
        return pulumi.get(self, "release_channel")

    @property
    @pulumi.getter(name="serviceAccountId")
    def service_account_id(self) -> str:
        """
        Service account to be used for provisioning Compute Cloud and VPC resources
        for Kubernetes cluster. Selected service account should have `edit` role on the folder where the Kubernetes
        cluster will be located and on the folder where selected network resides.
        """
        return pulumi.get(self, "service_account_id")

    @property
    @pulumi.getter(name="serviceIpv4Range")
    def service_ipv4_range(self) -> str:
        """
        IP range Kubernetes services Kubernetes cluster IP addresses will be allocated from.
        """
        return pulumi.get(self, "service_ipv4_range")

    @property
    @pulumi.getter(name="serviceIpv6Range")
    def service_ipv6_range(self) -> str:
        """
        Identical to service_ipv4_range but for the IPv6 protocol.
        """
        return pulumi.get(self, "service_ipv6_range")

    @property
    @pulumi.getter
    def status(self) -> str:
        """
        Status of the Kubernetes cluster.
        """
        return pulumi.get(self, "status")


class AwaitableGetKubernetesClusterResult(GetKubernetesClusterResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetKubernetesClusterResult(
            cluster_id=self.cluster_id,
            cluster_ipv4_range=self.cluster_ipv4_range,
            cluster_ipv6_range=self.cluster_ipv6_range,
            created_at=self.created_at,
            description=self.description,
            folder_id=self.folder_id,
            health=self.health,
            id=self.id,
            kms_providers=self.kms_providers,
            labels=self.labels,
            log_group_id=self.log_group_id,
            masters=self.masters,
            name=self.name,
            network_id=self.network_id,
            network_implementations=self.network_implementations,
            network_policy_provider=self.network_policy_provider,
            node_ipv4_cidr_mask_size=self.node_ipv4_cidr_mask_size,
            node_service_account_id=self.node_service_account_id,
            release_channel=self.release_channel,
            service_account_id=self.service_account_id,
            service_ipv4_range=self.service_ipv4_range,
            service_ipv6_range=self.service_ipv6_range,
            status=self.status)


def get_kubernetes_cluster(cluster_id: Optional[str] = None,
                           folder_id: Optional[str] = None,
                           name: Optional[str] = None,
                           opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetKubernetesClusterResult:
    """
    Get information about a Yandex Kubernetes Cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_yandex as yandex

    my_cluster = yandex.get_kubernetes_cluster(cluster_id="some_k8s_cluster_id")
    pulumi.export("clusterExternalV4Endpoint", my_cluster.masters[0].external_v4_endpoint)
    ```


    :param str cluster_id: ID of a specific Kubernetes cluster.
    :param str folder_id: Folder that the resource belongs to. If value is omitted, the default provider folder is used.
    :param str name: Name of a specific Kubernetes cluster.
    """
    __args__ = dict()
    __args__['clusterId'] = cluster_id
    __args__['folderId'] = folder_id
    __args__['name'] = name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = _utilities.get_version()
    __ret__ = pulumi.runtime.invoke('yandex:index/getKubernetesCluster:getKubernetesCluster', __args__, opts=opts, typ=GetKubernetesClusterResult).value

    return AwaitableGetKubernetesClusterResult(
        cluster_id=__ret__.cluster_id,
        cluster_ipv4_range=__ret__.cluster_ipv4_range,
        cluster_ipv6_range=__ret__.cluster_ipv6_range,
        created_at=__ret__.created_at,
        description=__ret__.description,
        folder_id=__ret__.folder_id,
        health=__ret__.health,
        id=__ret__.id,
        kms_providers=__ret__.kms_providers,
        labels=__ret__.labels,
        log_group_id=__ret__.log_group_id,
        masters=__ret__.masters,
        name=__ret__.name,
        network_id=__ret__.network_id,
        network_implementations=__ret__.network_implementations,
        network_policy_provider=__ret__.network_policy_provider,
        node_ipv4_cidr_mask_size=__ret__.node_ipv4_cidr_mask_size,
        node_service_account_id=__ret__.node_service_account_id,
        release_channel=__ret__.release_channel,
        service_account_id=__ret__.service_account_id,
        service_ipv4_range=__ret__.service_ipv4_range,
        service_ipv6_range=__ret__.service_ipv6_range,
        status=__ret__.status)


@_utilities.lift_output_func(get_kubernetes_cluster)
def get_kubernetes_cluster_output(cluster_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  folder_id: Optional[pulumi.Input[Optional[str]]] = None,
                                  name: Optional[pulumi.Input[Optional[str]]] = None,
                                  opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetKubernetesClusterResult]:
    """
    Get information about a Yandex Kubernetes Cluster.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_yandex as yandex

    my_cluster = yandex.get_kubernetes_cluster(cluster_id="some_k8s_cluster_id")
    pulumi.export("clusterExternalV4Endpoint", my_cluster.masters[0].external_v4_endpoint)
    ```


    :param str cluster_id: ID of a specific Kubernetes cluster.
    :param str folder_id: Folder that the resource belongs to. If value is omitted, the default provider folder is used.
    :param str name: Name of a specific Kubernetes cluster.
    """
    ...
