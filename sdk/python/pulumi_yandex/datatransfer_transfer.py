# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = ['DatatransferTransferArgs', 'DatatransferTransfer']

@pulumi.input_type
class DatatransferTransferArgs:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None):
        """
        The set of arguments for constructing a DatatransferTransfer resource.
        :param pulumi.Input[str] description: Arbitrary description text for the transfer.
        :param pulumi.Input[str] folder_id: ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the Data Transfer transfer.
        :param pulumi.Input[str] name: Name of the transfer.
        :param pulumi.Input[str] source_id: ID of the source endpoint for the transfer.
        :param pulumi.Input[str] target_id: ID of the target endpoint for the transfer.
        :param pulumi.Input[str] type: Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if type is not None:
            pulumi.set(__self__, "type", type)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Arbitrary description text for the transfer.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key/value label pairs to assign to the Data Transfer transfer.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the transfer.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the source endpoint for the transfer.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the target endpoint for the transfer.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)


@pulumi.input_type
class _DatatransferTransferState:
    def __init__(__self__, *,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 warning: Optional[pulumi.Input[str]] = None):
        """
        Input properties used for looking up and filtering DatatransferTransfer resources.
        :param pulumi.Input[str] description: Arbitrary description text for the transfer.
        :param pulumi.Input[str] folder_id: ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the Data Transfer transfer.
        :param pulumi.Input[str] name: Name of the transfer.
        :param pulumi.Input[str] source_id: ID of the source endpoint for the transfer.
        :param pulumi.Input[str] target_id: ID of the target endpoint for the transfer.
        :param pulumi.Input[str] type: Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
        :param pulumi.Input[str] warning: (Computed) Error description if transfer has any errors.
        """
        if description is not None:
            pulumi.set(__self__, "description", description)
        if folder_id is not None:
            pulumi.set(__self__, "folder_id", folder_id)
        if labels is not None:
            pulumi.set(__self__, "labels", labels)
        if name is not None:
            pulumi.set(__self__, "name", name)
        if source_id is not None:
            pulumi.set(__self__, "source_id", source_id)
        if target_id is not None:
            pulumi.set(__self__, "target_id", target_id)
        if type is not None:
            pulumi.set(__self__, "type", type)
        if warning is not None:
            pulumi.set(__self__, "warning", warning)

    @property
    @pulumi.getter
    def description(self) -> Optional[pulumi.Input[str]]:
        """
        Arbitrary description text for the transfer.
        """
        return pulumi.get(self, "description")

    @description.setter
    def description(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "description", value)

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @folder_id.setter
    def folder_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "folder_id", value)

    @property
    @pulumi.getter
    def labels(self) -> Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]:
        """
        A set of key/value label pairs to assign to the Data Transfer transfer.
        """
        return pulumi.get(self, "labels")

    @labels.setter
    def labels(self, value: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]]):
        pulumi.set(self, "labels", value)

    @property
    @pulumi.getter
    def name(self) -> Optional[pulumi.Input[str]]:
        """
        Name of the transfer.
        """
        return pulumi.get(self, "name")

    @name.setter
    def name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "name", value)

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the source endpoint for the transfer.
        """
        return pulumi.get(self, "source_id")

    @source_id.setter
    def source_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "source_id", value)

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> Optional[pulumi.Input[str]]:
        """
        ID of the target endpoint for the transfer.
        """
        return pulumi.get(self, "target_id")

    @target_id.setter
    def target_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "target_id", value)

    @property
    @pulumi.getter
    def type(self) -> Optional[pulumi.Input[str]]:
        """
        Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
        """
        return pulumi.get(self, "type")

    @type.setter
    def type(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "type", value)

    @property
    @pulumi.getter
    def warning(self) -> Optional[pulumi.Input[str]]:
        """
        (Computed) Error description if transfer has any errors.
        """
        return pulumi.get(self, "warning")

    @warning.setter
    def warning(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "warning", value)


class DatatransferTransfer(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        """
        Manages a Data Transfer transfer. For more information, see [the official documentation](https://cloud.yandex.com/docs/data-transfer/).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_yandex as yandex

        pg_source = yandex.DatatransferEndpoint("pgSource", settings=yandex.DatatransferEndpointSettingsArgs(
            postgres_source=yandex.DatatransferEndpointSettingsPostgresSourceArgs(
                connection=yandex.DatatransferEndpointSettingsPostgresSourceConnectionArgs(
                    on_premise=yandex.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs(
                        hosts=["example.org"],
                        port=5432,
                    ),
                ),
                slot_gigabyte_lag_limit=100,
                database="db1",
                user="user1",
                password=yandex.DatatransferEndpointSettingsPostgresSourcePasswordArgs(
                    raw="123",
                ),
            ),
        ))
        pg_target = yandex.DatatransferEndpoint("pgTarget",
            folder_id="some_folder_id",
            settings=yandex.DatatransferEndpointSettingsArgs(
                postgres_target=yandex.DatatransferEndpointSettingsPostgresTargetArgs(
                    connection=yandex.DatatransferEndpointSettingsPostgresTargetConnectionArgs(
                        mdb_cluster_id="some_cluster_id",
                    ),
                    database="db2",
                    user="user2",
                    password=yandex.DatatransferEndpointSettingsPostgresTargetPasswordArgs(
                        raw="321",
                    ),
                ),
            ))
        pgpg_transfer = yandex.DatatransferTransfer("pgpgTransfer",
            folder_id="some_folder_id",
            source_id=pg_source.id,
            target_id=pg_target.id,
            type="SNAPSHOT_AND_INCREMENT")
        ```

        ## Import

        A transfer can be imported using the `id` of the resource, e.g.

        ```sh
         $ pulumi import yandex:index/datatransferTransfer:DatatransferTransfer foo transfer_id
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Arbitrary description text for the transfer.
        :param pulumi.Input[str] folder_id: ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the Data Transfer transfer.
        :param pulumi.Input[str] name: Name of the transfer.
        :param pulumi.Input[str] source_id: ID of the source endpoint for the transfer.
        :param pulumi.Input[str] target_id: ID of the target endpoint for the transfer.
        :param pulumi.Input[str] type: Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: Optional[DatatransferTransferArgs] = None,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        Manages a Data Transfer transfer. For more information, see [the official documentation](https://cloud.yandex.com/docs/data-transfer/).

        ## Example Usage

        ```python
        import pulumi
        import pulumi_yandex as yandex

        pg_source = yandex.DatatransferEndpoint("pgSource", settings=yandex.DatatransferEndpointSettingsArgs(
            postgres_source=yandex.DatatransferEndpointSettingsPostgresSourceArgs(
                connection=yandex.DatatransferEndpointSettingsPostgresSourceConnectionArgs(
                    on_premise=yandex.DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs(
                        hosts=["example.org"],
                        port=5432,
                    ),
                ),
                slot_gigabyte_lag_limit=100,
                database="db1",
                user="user1",
                password=yandex.DatatransferEndpointSettingsPostgresSourcePasswordArgs(
                    raw="123",
                ),
            ),
        ))
        pg_target = yandex.DatatransferEndpoint("pgTarget",
            folder_id="some_folder_id",
            settings=yandex.DatatransferEndpointSettingsArgs(
                postgres_target=yandex.DatatransferEndpointSettingsPostgresTargetArgs(
                    connection=yandex.DatatransferEndpointSettingsPostgresTargetConnectionArgs(
                        mdb_cluster_id="some_cluster_id",
                    ),
                    database="db2",
                    user="user2",
                    password=yandex.DatatransferEndpointSettingsPostgresTargetPasswordArgs(
                        raw="321",
                    ),
                ),
            ))
        pgpg_transfer = yandex.DatatransferTransfer("pgpgTransfer",
            folder_id="some_folder_id",
            source_id=pg_source.id,
            target_id=pg_target.id,
            type="SNAPSHOT_AND_INCREMENT")
        ```

        ## Import

        A transfer can be imported using the `id` of the resource, e.g.

        ```sh
         $ pulumi import yandex:index/datatransferTransfer:DatatransferTransfer foo transfer_id
        ```

        :param str resource_name: The name of the resource.
        :param DatatransferTransferArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(DatatransferTransferArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 description: Optional[pulumi.Input[str]] = None,
                 folder_id: Optional[pulumi.Input[str]] = None,
                 labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
                 name: Optional[pulumi.Input[str]] = None,
                 source_id: Optional[pulumi.Input[str]] = None,
                 target_id: Optional[pulumi.Input[str]] = None,
                 type: Optional[pulumi.Input[str]] = None,
                 __props__=None):
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = DatatransferTransferArgs.__new__(DatatransferTransferArgs)

            __props__.__dict__["description"] = description
            __props__.__dict__["folder_id"] = folder_id
            __props__.__dict__["labels"] = labels
            __props__.__dict__["name"] = name
            __props__.__dict__["source_id"] = source_id
            __props__.__dict__["target_id"] = target_id
            __props__.__dict__["type"] = type
            __props__.__dict__["warning"] = None
        super(DatatransferTransfer, __self__).__init__(
            'yandex:index/datatransferTransfer:DatatransferTransfer',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            description: Optional[pulumi.Input[str]] = None,
            folder_id: Optional[pulumi.Input[str]] = None,
            labels: Optional[pulumi.Input[Mapping[str, pulumi.Input[str]]]] = None,
            name: Optional[pulumi.Input[str]] = None,
            source_id: Optional[pulumi.Input[str]] = None,
            target_id: Optional[pulumi.Input[str]] = None,
            type: Optional[pulumi.Input[str]] = None,
            warning: Optional[pulumi.Input[str]] = None) -> 'DatatransferTransfer':
        """
        Get an existing DatatransferTransfer resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] description: Arbitrary description text for the transfer.
        :param pulumi.Input[str] folder_id: ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
        :param pulumi.Input[Mapping[str, pulumi.Input[str]]] labels: A set of key/value label pairs to assign to the Data Transfer transfer.
        :param pulumi.Input[str] name: Name of the transfer.
        :param pulumi.Input[str] source_id: ID of the source endpoint for the transfer.
        :param pulumi.Input[str] target_id: ID of the target endpoint for the transfer.
        :param pulumi.Input[str] type: Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
        :param pulumi.Input[str] warning: (Computed) Error description if transfer has any errors.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _DatatransferTransferState.__new__(_DatatransferTransferState)

        __props__.__dict__["description"] = description
        __props__.__dict__["folder_id"] = folder_id
        __props__.__dict__["labels"] = labels
        __props__.__dict__["name"] = name
        __props__.__dict__["source_id"] = source_id
        __props__.__dict__["target_id"] = target_id
        __props__.__dict__["type"] = type
        __props__.__dict__["warning"] = warning
        return DatatransferTransfer(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter
    def description(self) -> pulumi.Output[Optional[str]]:
        """
        Arbitrary description text for the transfer.
        """
        return pulumi.get(self, "description")

    @property
    @pulumi.getter(name="folderId")
    def folder_id(self) -> pulumi.Output[str]:
        """
        ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
        """
        return pulumi.get(self, "folder_id")

    @property
    @pulumi.getter
    def labels(self) -> pulumi.Output[Optional[Mapping[str, str]]]:
        """
        A set of key/value label pairs to assign to the Data Transfer transfer.
        """
        return pulumi.get(self, "labels")

    @property
    @pulumi.getter
    def name(self) -> pulumi.Output[str]:
        """
        Name of the transfer.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="sourceId")
    def source_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the source endpoint for the transfer.
        """
        return pulumi.get(self, "source_id")

    @property
    @pulumi.getter(name="targetId")
    def target_id(self) -> pulumi.Output[Optional[str]]:
        """
        ID of the target endpoint for the transfer.
        """
        return pulumi.get(self, "target_id")

    @property
    @pulumi.getter
    def type(self) -> pulumi.Output[Optional[str]]:
        """
        Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
        """
        return pulumi.get(self, "type")

    @property
    @pulumi.getter
    def warning(self) -> pulumi.Output[str]:
        """
        (Computed) Error description if transfer has any errors.
        """
        return pulumi.get(self, "warning")

