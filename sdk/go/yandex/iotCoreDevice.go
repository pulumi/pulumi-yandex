// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows management of [Yandex.Cloud IoT Device](https://cloud.yandex.com/docs/iot-core/quickstart).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := yandex.NewIotCoreDevice(ctx, "myDevice", &yandex.IotCoreDeviceArgs{
// 			Aliases: pulumi.StringMap{
// 				"some_alias1/subtopic": pulumi.String(fmt.Sprintf("%v%v", "$", "devices/{id}/events/somesubtopic")),
// 				"some_alias2/subtopic": pulumi.String(fmt.Sprintf("%v%v", "$", "devices/{id}/events/aaa/bbb")),
// 			},
// 			Certificates: pulumi.StringArray{
// 				pulumi.String("public part of certificate1"),
// 				pulumi.String("public part of certificate2"),
// 			},
// 			Description: pulumi.String("any description"),
// 			Passwords: pulumi.StringArray{
// 				pulumi.String("my-password1"),
// 				pulumi.String("my-password2"),
// 			},
// 			RegistryId: pulumi.String("are1sampleregistryid11"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type IotCoreDevice struct {
	pulumi.CustomResourceState

	// A set of key/value aliases pairs to assign to the IoT Core Device
	Aliases pulumi.StringMapOutput `pulumi:"aliases"`
	// A set of certificate's fingerprints for the IoT Core Device
	Certificates pulumi.StringArrayOutput `pulumi:"certificates"`
	// Creation timestamp of the IoT Core Device
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the IoT Core Device
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// IoT Core Device name used to define device
	Name pulumi.StringOutput `pulumi:"name"`
	// A set of passwords's id for the IoT Core Device
	Passwords pulumi.StringArrayOutput `pulumi:"passwords"`
	// IoT Core Registry ID for the IoT Core Device
	RegistryId pulumi.StringOutput `pulumi:"registryId"`
}

// NewIotCoreDevice registers a new resource with the given unique name, arguments, and options.
func NewIotCoreDevice(ctx *pulumi.Context,
	name string, args *IotCoreDeviceArgs, opts ...pulumi.ResourceOption) (*IotCoreDevice, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.RegistryId == nil {
		return nil, errors.New("invalid value for required argument 'RegistryId'")
	}
	var resource IotCoreDevice
	err := ctx.RegisterResource("yandex:index/iotCoreDevice:IotCoreDevice", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIotCoreDevice gets an existing IotCoreDevice resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIotCoreDevice(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IotCoreDeviceState, opts ...pulumi.ResourceOption) (*IotCoreDevice, error) {
	var resource IotCoreDevice
	err := ctx.ReadResource("yandex:index/iotCoreDevice:IotCoreDevice", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IotCoreDevice resources.
type iotCoreDeviceState struct {
	// A set of key/value aliases pairs to assign to the IoT Core Device
	Aliases map[string]string `pulumi:"aliases"`
	// A set of certificate's fingerprints for the IoT Core Device
	Certificates []string `pulumi:"certificates"`
	// Creation timestamp of the IoT Core Device
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the IoT Core Device
	Description *string `pulumi:"description"`
	// IoT Core Device name used to define device
	Name *string `pulumi:"name"`
	// A set of passwords's id for the IoT Core Device
	Passwords []string `pulumi:"passwords"`
	// IoT Core Registry ID for the IoT Core Device
	RegistryId *string `pulumi:"registryId"`
}

type IotCoreDeviceState struct {
	// A set of key/value aliases pairs to assign to the IoT Core Device
	Aliases pulumi.StringMapInput
	// A set of certificate's fingerprints for the IoT Core Device
	Certificates pulumi.StringArrayInput
	// Creation timestamp of the IoT Core Device
	CreatedAt pulumi.StringPtrInput
	// Description of the IoT Core Device
	Description pulumi.StringPtrInput
	// IoT Core Device name used to define device
	Name pulumi.StringPtrInput
	// A set of passwords's id for the IoT Core Device
	Passwords pulumi.StringArrayInput
	// IoT Core Registry ID for the IoT Core Device
	RegistryId pulumi.StringPtrInput
}

func (IotCoreDeviceState) ElementType() reflect.Type {
	return reflect.TypeOf((*iotCoreDeviceState)(nil)).Elem()
}

type iotCoreDeviceArgs struct {
	// A set of key/value aliases pairs to assign to the IoT Core Device
	Aliases map[string]string `pulumi:"aliases"`
	// A set of certificate's fingerprints for the IoT Core Device
	Certificates []string `pulumi:"certificates"`
	// Description of the IoT Core Device
	Description *string `pulumi:"description"`
	// IoT Core Device name used to define device
	Name *string `pulumi:"name"`
	// A set of passwords's id for the IoT Core Device
	Passwords []string `pulumi:"passwords"`
	// IoT Core Registry ID for the IoT Core Device
	RegistryId string `pulumi:"registryId"`
}

// The set of arguments for constructing a IotCoreDevice resource.
type IotCoreDeviceArgs struct {
	// A set of key/value aliases pairs to assign to the IoT Core Device
	Aliases pulumi.StringMapInput
	// A set of certificate's fingerprints for the IoT Core Device
	Certificates pulumi.StringArrayInput
	// Description of the IoT Core Device
	Description pulumi.StringPtrInput
	// IoT Core Device name used to define device
	Name pulumi.StringPtrInput
	// A set of passwords's id for the IoT Core Device
	Passwords pulumi.StringArrayInput
	// IoT Core Registry ID for the IoT Core Device
	RegistryId pulumi.StringInput
}

func (IotCoreDeviceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iotCoreDeviceArgs)(nil)).Elem()
}

type IotCoreDeviceInput interface {
	pulumi.Input

	ToIotCoreDeviceOutput() IotCoreDeviceOutput
	ToIotCoreDeviceOutputWithContext(ctx context.Context) IotCoreDeviceOutput
}

func (*IotCoreDevice) ElementType() reflect.Type {
	return reflect.TypeOf((**IotCoreDevice)(nil)).Elem()
}

func (i *IotCoreDevice) ToIotCoreDeviceOutput() IotCoreDeviceOutput {
	return i.ToIotCoreDeviceOutputWithContext(context.Background())
}

func (i *IotCoreDevice) ToIotCoreDeviceOutputWithContext(ctx context.Context) IotCoreDeviceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotCoreDeviceOutput)
}

// IotCoreDeviceArrayInput is an input type that accepts IotCoreDeviceArray and IotCoreDeviceArrayOutput values.
// You can construct a concrete instance of `IotCoreDeviceArrayInput` via:
//
//          IotCoreDeviceArray{ IotCoreDeviceArgs{...} }
type IotCoreDeviceArrayInput interface {
	pulumi.Input

	ToIotCoreDeviceArrayOutput() IotCoreDeviceArrayOutput
	ToIotCoreDeviceArrayOutputWithContext(context.Context) IotCoreDeviceArrayOutput
}

type IotCoreDeviceArray []IotCoreDeviceInput

func (IotCoreDeviceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IotCoreDevice)(nil)).Elem()
}

func (i IotCoreDeviceArray) ToIotCoreDeviceArrayOutput() IotCoreDeviceArrayOutput {
	return i.ToIotCoreDeviceArrayOutputWithContext(context.Background())
}

func (i IotCoreDeviceArray) ToIotCoreDeviceArrayOutputWithContext(ctx context.Context) IotCoreDeviceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotCoreDeviceArrayOutput)
}

// IotCoreDeviceMapInput is an input type that accepts IotCoreDeviceMap and IotCoreDeviceMapOutput values.
// You can construct a concrete instance of `IotCoreDeviceMapInput` via:
//
//          IotCoreDeviceMap{ "key": IotCoreDeviceArgs{...} }
type IotCoreDeviceMapInput interface {
	pulumi.Input

	ToIotCoreDeviceMapOutput() IotCoreDeviceMapOutput
	ToIotCoreDeviceMapOutputWithContext(context.Context) IotCoreDeviceMapOutput
}

type IotCoreDeviceMap map[string]IotCoreDeviceInput

func (IotCoreDeviceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IotCoreDevice)(nil)).Elem()
}

func (i IotCoreDeviceMap) ToIotCoreDeviceMapOutput() IotCoreDeviceMapOutput {
	return i.ToIotCoreDeviceMapOutputWithContext(context.Background())
}

func (i IotCoreDeviceMap) ToIotCoreDeviceMapOutputWithContext(ctx context.Context) IotCoreDeviceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IotCoreDeviceMapOutput)
}

type IotCoreDeviceOutput struct{ *pulumi.OutputState }

func (IotCoreDeviceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IotCoreDevice)(nil)).Elem()
}

func (o IotCoreDeviceOutput) ToIotCoreDeviceOutput() IotCoreDeviceOutput {
	return o
}

func (o IotCoreDeviceOutput) ToIotCoreDeviceOutputWithContext(ctx context.Context) IotCoreDeviceOutput {
	return o
}

type IotCoreDeviceArrayOutput struct{ *pulumi.OutputState }

func (IotCoreDeviceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IotCoreDevice)(nil)).Elem()
}

func (o IotCoreDeviceArrayOutput) ToIotCoreDeviceArrayOutput() IotCoreDeviceArrayOutput {
	return o
}

func (o IotCoreDeviceArrayOutput) ToIotCoreDeviceArrayOutputWithContext(ctx context.Context) IotCoreDeviceArrayOutput {
	return o
}

func (o IotCoreDeviceArrayOutput) Index(i pulumi.IntInput) IotCoreDeviceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IotCoreDevice {
		return vs[0].([]*IotCoreDevice)[vs[1].(int)]
	}).(IotCoreDeviceOutput)
}

type IotCoreDeviceMapOutput struct{ *pulumi.OutputState }

func (IotCoreDeviceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IotCoreDevice)(nil)).Elem()
}

func (o IotCoreDeviceMapOutput) ToIotCoreDeviceMapOutput() IotCoreDeviceMapOutput {
	return o
}

func (o IotCoreDeviceMapOutput) ToIotCoreDeviceMapOutputWithContext(ctx context.Context) IotCoreDeviceMapOutput {
	return o
}

func (o IotCoreDeviceMapOutput) MapIndex(k pulumi.StringInput) IotCoreDeviceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IotCoreDevice {
		return vs[0].(map[string]*IotCoreDevice)[vs[1].(string)]
	}).(IotCoreDeviceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IotCoreDeviceInput)(nil)).Elem(), &IotCoreDevice{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotCoreDeviceArrayInput)(nil)).Elem(), IotCoreDeviceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IotCoreDeviceMapInput)(nil)).Elem(), IotCoreDeviceMap{})
	pulumi.RegisterOutputType(IotCoreDeviceOutput{})
	pulumi.RegisterOutputType(IotCoreDeviceArrayOutput{})
	pulumi.RegisterOutputType(IotCoreDeviceMapOutput{})
}
