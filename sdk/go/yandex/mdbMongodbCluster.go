// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a MongoDB cluster within the Yandex.Cloud. For more information, see
// [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/concepts).
//
// ## Example Usage
//
// Example of creating a Single Node MongoDB.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		fooVpcNetwork, err := yandex.NewVpcNetwork(ctx, "fooVpcNetwork", nil)
// 		if err != nil {
// 			return err
// 		}
// 		fooVpcSubnet, err := yandex.NewVpcSubnet(ctx, "fooVpcSubnet", &yandex.VpcSubnetArgs{
// 			NetworkId: fooVpcNetwork.ID(),
// 			V4CidrBlocks: pulumi.StringArray{
// 				pulumi.String("10.1.0.0/24"),
// 			},
// 			Zone: pulumi.String("ru-central1-a"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewMdbMongodbCluster(ctx, "fooMdbMongodbCluster", &yandex.MdbMongodbClusterArgs{
// 			ClusterConfig: &MdbMongodbClusterClusterConfigArgs{
// 				Version: pulumi.String("4.2"),
// 			},
// 			Databases: MdbMongodbClusterDatabaseArray{
// 				&MdbMongodbClusterDatabaseArgs{
// 					Name: pulumi.String("testdb"),
// 				},
// 			},
// 			Environment: pulumi.String("PRESTABLE"),
// 			Hosts: MdbMongodbClusterHostArray{
// 				&MdbMongodbClusterHostArgs{
// 					SubnetId: fooVpcSubnet.ID(),
// 					ZoneId:   pulumi.String("ru-central1-a"),
// 				},
// 			},
// 			Labels: pulumi.StringMap{
// 				"test_key": pulumi.String("test_value"),
// 			},
// 			MaintenanceWindow: &MdbMongodbClusterMaintenanceWindowArgs{
// 				Type: pulumi.String("ANYTIME"),
// 			},
// 			NetworkId: fooVpcNetwork.ID(),
// 			Resources: &MdbMongodbClusterResourcesArgs{
// 				DiskSize:         pulumi.Int(16),
// 				DiskTypeId:       pulumi.String("network-hdd"),
// 				ResourcePresetId: pulumi.String("b1.nano"),
// 			},
// 			Users: MdbMongodbClusterUserArray{
// 				&MdbMongodbClusterUserArgs{
// 					Name:     pulumi.String("john"),
// 					Password: pulumi.String("password"),
// 					Permissions: MdbMongodbClusterUserPermissionArray{
// 						&MdbMongodbClusterUserPermissionArgs{
// 							DatabaseName: pulumi.String("testdb"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A cluster can be imported using the `id` of the resource, e.g.
//
// ```sh
//  $ pulumi import yandex:index/mdbMongodbCluster:MdbMongodbCluster foo cluster_id
// ```
type MdbMongodbCluster struct {
	pulumi.CustomResourceState

	// Configuration of the MongoDB subcluster. The structure is documented below.
	ClusterConfig MdbMongodbClusterClusterConfigOutput `pulumi:"clusterConfig"`
	// The ID of the cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Creation timestamp of the key.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A database of the MongoDB cluster. The structure is documented below.
	Databases MdbMongodbClusterDatabaseArrayOutput `pulumi:"databases"`
	// Inhibits deletion of the cluster.  Can be either `true` or `false`.
	// ***
	DeletionProtection pulumi.BoolOutput `pulumi:"deletionProtection"`
	// Description of the MongoDB cluster.
	Description pulumi.StringOutput `pulumi:"description"`
	// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringOutput `pulumi:"environment"`
	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// The health of the host.
	Health pulumi.StringOutput `pulumi:"health"`
	// A host of the MongoDB cluster. The structure is documented below.
	Hosts MdbMongodbClusterHostArrayOutput `pulumi:"hosts"`
	// A set of key/value label pairs to assign to the MongoDB cluster.
	Labels            pulumi.StringMapOutput                   `pulumi:"labels"`
	MaintenanceWindow MdbMongodbClusterMaintenanceWindowOutput `pulumi:"maintenanceWindow"`
	// The fully qualified domain name of the host. Computed on server side.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the network, to which the MongoDB cluster belongs.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
	Resources MdbMongodbClusterResourcesOutput `pulumi:"resources"`
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// MongoDB Cluster mode enabled/disabled.
	Sharded pulumi.BoolOutput `pulumi:"sharded"`
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
	// For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).
	Status pulumi.StringOutput `pulumi:"status"`
	// A user of the MongoDB cluster. The structure is documented below.
	Users MdbMongodbClusterUserArrayOutput `pulumi:"users"`
}

// NewMdbMongodbCluster registers a new resource with the given unique name, arguments, and options.
func NewMdbMongodbCluster(ctx *pulumi.Context,
	name string, args *MdbMongodbClusterArgs, opts ...pulumi.ResourceOption) (*MdbMongodbCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterConfig == nil {
		return nil, errors.New("invalid value for required argument 'ClusterConfig'")
	}
	if args.Databases == nil {
		return nil, errors.New("invalid value for required argument 'Databases'")
	}
	if args.Environment == nil {
		return nil, errors.New("invalid value for required argument 'Environment'")
	}
	if args.Hosts == nil {
		return nil, errors.New("invalid value for required argument 'Hosts'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	if args.Resources == nil {
		return nil, errors.New("invalid value for required argument 'Resources'")
	}
	if args.Users == nil {
		return nil, errors.New("invalid value for required argument 'Users'")
	}
	var resource MdbMongodbCluster
	err := ctx.RegisterResource("yandex:index/mdbMongodbCluster:MdbMongodbCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMdbMongodbCluster gets an existing MdbMongodbCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMdbMongodbCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MdbMongodbClusterState, opts ...pulumi.ResourceOption) (*MdbMongodbCluster, error) {
	var resource MdbMongodbCluster
	err := ctx.ReadResource("yandex:index/mdbMongodbCluster:MdbMongodbCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MdbMongodbCluster resources.
type mdbMongodbClusterState struct {
	// Configuration of the MongoDB subcluster. The structure is documented below.
	ClusterConfig *MdbMongodbClusterClusterConfig `pulumi:"clusterConfig"`
	// The ID of the cluster.
	ClusterId *string `pulumi:"clusterId"`
	// Creation timestamp of the key.
	CreatedAt *string `pulumi:"createdAt"`
	// A database of the MongoDB cluster. The structure is documented below.
	Databases []MdbMongodbClusterDatabase `pulumi:"databases"`
	// Inhibits deletion of the cluster.  Can be either `true` or `false`.
	// ***
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// Description of the MongoDB cluster.
	Description *string `pulumi:"description"`
	// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment *string `pulumi:"environment"`
	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// The health of the host.
	Health *string `pulumi:"health"`
	// A host of the MongoDB cluster. The structure is documented below.
	Hosts []MdbMongodbClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs to assign to the MongoDB cluster.
	Labels            map[string]string                   `pulumi:"labels"`
	MaintenanceWindow *MdbMongodbClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The fully qualified domain name of the host. Computed on server side.
	Name *string `pulumi:"name"`
	// ID of the network, to which the MongoDB cluster belongs.
	NetworkId *string `pulumi:"networkId"`
	// Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
	Resources *MdbMongodbClusterResources `pulumi:"resources"`
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// MongoDB Cluster mode enabled/disabled.
	Sharded *bool `pulumi:"sharded"`
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
	// For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).
	Status *string `pulumi:"status"`
	// A user of the MongoDB cluster. The structure is documented below.
	Users []MdbMongodbClusterUser `pulumi:"users"`
}

type MdbMongodbClusterState struct {
	// Configuration of the MongoDB subcluster. The structure is documented below.
	ClusterConfig MdbMongodbClusterClusterConfigPtrInput
	// The ID of the cluster.
	ClusterId pulumi.StringPtrInput
	// Creation timestamp of the key.
	CreatedAt pulumi.StringPtrInput
	// A database of the MongoDB cluster. The structure is documented below.
	Databases MdbMongodbClusterDatabaseArrayInput
	// Inhibits deletion of the cluster.  Can be either `true` or `false`.
	// ***
	DeletionProtection pulumi.BoolPtrInput
	// Description of the MongoDB cluster.
	Description pulumi.StringPtrInput
	// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringPtrInput
	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// The health of the host.
	Health pulumi.StringPtrInput
	// A host of the MongoDB cluster. The structure is documented below.
	Hosts MdbMongodbClusterHostArrayInput
	// A set of key/value label pairs to assign to the MongoDB cluster.
	Labels            pulumi.StringMapInput
	MaintenanceWindow MdbMongodbClusterMaintenanceWindowPtrInput
	// The fully qualified domain name of the host. Computed on server side.
	Name pulumi.StringPtrInput
	// ID of the network, to which the MongoDB cluster belongs.
	NetworkId pulumi.StringPtrInput
	// Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
	Resources MdbMongodbClusterResourcesPtrInput
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds pulumi.StringArrayInput
	// MongoDB Cluster mode enabled/disabled.
	Sharded pulumi.BoolPtrInput
	// Status of the cluster. Can be either `CREATING`, `STARTING`, `RUNNING`, `UPDATING`, `STOPPING`, `STOPPED`, `ERROR` or `STATUS_UNKNOWN`.
	// For more information see `status` field of JSON representation in [the official documentation](https://cloud.yandex.com/docs/managed-mongodb/api-ref/Cluster/).
	Status pulumi.StringPtrInput
	// A user of the MongoDB cluster. The structure is documented below.
	Users MdbMongodbClusterUserArrayInput
}

func (MdbMongodbClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbMongodbClusterState)(nil)).Elem()
}

type mdbMongodbClusterArgs struct {
	// Configuration of the MongoDB subcluster. The structure is documented below.
	ClusterConfig MdbMongodbClusterClusterConfig `pulumi:"clusterConfig"`
	// The ID of the cluster.
	ClusterId *string `pulumi:"clusterId"`
	// A database of the MongoDB cluster. The structure is documented below.
	Databases []MdbMongodbClusterDatabase `pulumi:"databases"`
	// Inhibits deletion of the cluster.  Can be either `true` or `false`.
	// ***
	DeletionProtection *bool `pulumi:"deletionProtection"`
	// Description of the MongoDB cluster.
	Description *string `pulumi:"description"`
	// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment string `pulumi:"environment"`
	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// A host of the MongoDB cluster. The structure is documented below.
	Hosts []MdbMongodbClusterHost `pulumi:"hosts"`
	// A set of key/value label pairs to assign to the MongoDB cluster.
	Labels            map[string]string                   `pulumi:"labels"`
	MaintenanceWindow *MdbMongodbClusterMaintenanceWindow `pulumi:"maintenanceWindow"`
	// The fully qualified domain name of the host. Computed on server side.
	Name *string `pulumi:"name"`
	// ID of the network, to which the MongoDB cluster belongs.
	NetworkId string `pulumi:"networkId"`
	// Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
	Resources MdbMongodbClusterResources `pulumi:"resources"`
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// A user of the MongoDB cluster. The structure is documented below.
	Users []MdbMongodbClusterUser `pulumi:"users"`
}

// The set of arguments for constructing a MdbMongodbCluster resource.
type MdbMongodbClusterArgs struct {
	// Configuration of the MongoDB subcluster. The structure is documented below.
	ClusterConfig MdbMongodbClusterClusterConfigInput
	// The ID of the cluster.
	ClusterId pulumi.StringPtrInput
	// A database of the MongoDB cluster. The structure is documented below.
	Databases MdbMongodbClusterDatabaseArrayInput
	// Inhibits deletion of the cluster.  Can be either `true` or `false`.
	// ***
	DeletionProtection pulumi.BoolPtrInput
	// Description of the MongoDB cluster.
	Description pulumi.StringPtrInput
	// Deployment environment of the MongoDB cluster. Can be either `PRESTABLE` or `PRODUCTION`.
	Environment pulumi.StringInput
	// The ID of the folder that the resource belongs to. If it
	// is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// A host of the MongoDB cluster. The structure is documented below.
	Hosts MdbMongodbClusterHostArrayInput
	// A set of key/value label pairs to assign to the MongoDB cluster.
	Labels            pulumi.StringMapInput
	MaintenanceWindow MdbMongodbClusterMaintenanceWindowPtrInput
	// The fully qualified domain name of the host. Computed on server side.
	Name pulumi.StringPtrInput
	// ID of the network, to which the MongoDB cluster belongs.
	NetworkId pulumi.StringInput
	// Resources allocated to hosts of the MongoDB cluster. The structure is documented below.
	Resources MdbMongodbClusterResourcesInput
	// A set of ids of security groups assigned to hosts of the cluster.
	SecurityGroupIds pulumi.StringArrayInput
	// A user of the MongoDB cluster. The structure is documented below.
	Users MdbMongodbClusterUserArrayInput
}

func (MdbMongodbClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mdbMongodbClusterArgs)(nil)).Elem()
}

type MdbMongodbClusterInput interface {
	pulumi.Input

	ToMdbMongodbClusterOutput() MdbMongodbClusterOutput
	ToMdbMongodbClusterOutputWithContext(ctx context.Context) MdbMongodbClusterOutput
}

func (*MdbMongodbCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbMongodbCluster)(nil)).Elem()
}

func (i *MdbMongodbCluster) ToMdbMongodbClusterOutput() MdbMongodbClusterOutput {
	return i.ToMdbMongodbClusterOutputWithContext(context.Background())
}

func (i *MdbMongodbCluster) ToMdbMongodbClusterOutputWithContext(ctx context.Context) MdbMongodbClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbMongodbClusterOutput)
}

// MdbMongodbClusterArrayInput is an input type that accepts MdbMongodbClusterArray and MdbMongodbClusterArrayOutput values.
// You can construct a concrete instance of `MdbMongodbClusterArrayInput` via:
//
//          MdbMongodbClusterArray{ MdbMongodbClusterArgs{...} }
type MdbMongodbClusterArrayInput interface {
	pulumi.Input

	ToMdbMongodbClusterArrayOutput() MdbMongodbClusterArrayOutput
	ToMdbMongodbClusterArrayOutputWithContext(context.Context) MdbMongodbClusterArrayOutput
}

type MdbMongodbClusterArray []MdbMongodbClusterInput

func (MdbMongodbClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbMongodbCluster)(nil)).Elem()
}

func (i MdbMongodbClusterArray) ToMdbMongodbClusterArrayOutput() MdbMongodbClusterArrayOutput {
	return i.ToMdbMongodbClusterArrayOutputWithContext(context.Background())
}

func (i MdbMongodbClusterArray) ToMdbMongodbClusterArrayOutputWithContext(ctx context.Context) MdbMongodbClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbMongodbClusterArrayOutput)
}

// MdbMongodbClusterMapInput is an input type that accepts MdbMongodbClusterMap and MdbMongodbClusterMapOutput values.
// You can construct a concrete instance of `MdbMongodbClusterMapInput` via:
//
//          MdbMongodbClusterMap{ "key": MdbMongodbClusterArgs{...} }
type MdbMongodbClusterMapInput interface {
	pulumi.Input

	ToMdbMongodbClusterMapOutput() MdbMongodbClusterMapOutput
	ToMdbMongodbClusterMapOutputWithContext(context.Context) MdbMongodbClusterMapOutput
}

type MdbMongodbClusterMap map[string]MdbMongodbClusterInput

func (MdbMongodbClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbMongodbCluster)(nil)).Elem()
}

func (i MdbMongodbClusterMap) ToMdbMongodbClusterMapOutput() MdbMongodbClusterMapOutput {
	return i.ToMdbMongodbClusterMapOutputWithContext(context.Background())
}

func (i MdbMongodbClusterMap) ToMdbMongodbClusterMapOutputWithContext(ctx context.Context) MdbMongodbClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MdbMongodbClusterMapOutput)
}

type MdbMongodbClusterOutput struct{ *pulumi.OutputState }

func (MdbMongodbClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MdbMongodbCluster)(nil)).Elem()
}

func (o MdbMongodbClusterOutput) ToMdbMongodbClusterOutput() MdbMongodbClusterOutput {
	return o
}

func (o MdbMongodbClusterOutput) ToMdbMongodbClusterOutputWithContext(ctx context.Context) MdbMongodbClusterOutput {
	return o
}

type MdbMongodbClusterArrayOutput struct{ *pulumi.OutputState }

func (MdbMongodbClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MdbMongodbCluster)(nil)).Elem()
}

func (o MdbMongodbClusterArrayOutput) ToMdbMongodbClusterArrayOutput() MdbMongodbClusterArrayOutput {
	return o
}

func (o MdbMongodbClusterArrayOutput) ToMdbMongodbClusterArrayOutputWithContext(ctx context.Context) MdbMongodbClusterArrayOutput {
	return o
}

func (o MdbMongodbClusterArrayOutput) Index(i pulumi.IntInput) MdbMongodbClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MdbMongodbCluster {
		return vs[0].([]*MdbMongodbCluster)[vs[1].(int)]
	}).(MdbMongodbClusterOutput)
}

type MdbMongodbClusterMapOutput struct{ *pulumi.OutputState }

func (MdbMongodbClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MdbMongodbCluster)(nil)).Elem()
}

func (o MdbMongodbClusterMapOutput) ToMdbMongodbClusterMapOutput() MdbMongodbClusterMapOutput {
	return o
}

func (o MdbMongodbClusterMapOutput) ToMdbMongodbClusterMapOutputWithContext(ctx context.Context) MdbMongodbClusterMapOutput {
	return o
}

func (o MdbMongodbClusterMapOutput) MapIndex(k pulumi.StringInput) MdbMongodbClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MdbMongodbCluster {
		return vs[0].(map[string]*MdbMongodbCluster)[vs[1].(string)]
	}).(MdbMongodbClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MdbMongodbClusterInput)(nil)).Elem(), &MdbMongodbCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbMongodbClusterArrayInput)(nil)).Elem(), MdbMongodbClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MdbMongodbClusterMapInput)(nil)).Elem(), MdbMongodbClusterMap{})
	pulumi.RegisterOutputType(MdbMongodbClusterOutput{})
	pulumi.RegisterOutputType(MdbMongodbClusterArrayOutput{})
	pulumi.RegisterOutputType(MdbMongodbClusterMapOutput{})
}
