// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// A Disk Placement Group resource. For more information, see
// [the official documentation](https://cloud.yandex.com/docs/compute/concepts/disk#nr-disks).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := yandex.NewComputeDiskPlacementGroup(ctx, "group1", &yandex.ComputeDiskPlacementGroupArgs{
// 			Description: pulumi.String("my description"),
// 			FolderId:    pulumi.String("abc*********123"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type ComputeDiskPlacementGroup struct {
	pulumi.CustomResourceState

	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// A description of the Disk Placement Group.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// Folder that the resource belongs to. If value is omitted, the default provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the Disk Placement Group.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// The name of the Disk Placement Group.
	Name pulumi.StringOutput `pulumi:"name"`
	// Status of the Disk Placement Group.
	Status pulumi.StringOutput `pulumi:"status"`
	// ID of the zone where the Disk Placement Group resides.
	Zone pulumi.StringPtrOutput `pulumi:"zone"`
}

// NewComputeDiskPlacementGroup registers a new resource with the given unique name, arguments, and options.
func NewComputeDiskPlacementGroup(ctx *pulumi.Context,
	name string, args *ComputeDiskPlacementGroupArgs, opts ...pulumi.ResourceOption) (*ComputeDiskPlacementGroup, error) {
	if args == nil {
		args = &ComputeDiskPlacementGroupArgs{}
	}

	var resource ComputeDiskPlacementGroup
	err := ctx.RegisterResource("yandex:index/computeDiskPlacementGroup:ComputeDiskPlacementGroup", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetComputeDiskPlacementGroup gets an existing ComputeDiskPlacementGroup resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetComputeDiskPlacementGroup(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ComputeDiskPlacementGroupState, opts ...pulumi.ResourceOption) (*ComputeDiskPlacementGroup, error) {
	var resource ComputeDiskPlacementGroup
	err := ctx.ReadResource("yandex:index/computeDiskPlacementGroup:ComputeDiskPlacementGroup", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ComputeDiskPlacementGroup resources.
type computeDiskPlacementGroupState struct {
	CreatedAt *string `pulumi:"createdAt"`
	// A description of the Disk Placement Group.
	Description *string `pulumi:"description"`
	// Folder that the resource belongs to. If value is omitted, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the Disk Placement Group.
	Labels map[string]string `pulumi:"labels"`
	// The name of the Disk Placement Group.
	Name *string `pulumi:"name"`
	// Status of the Disk Placement Group.
	Status *string `pulumi:"status"`
	// ID of the zone where the Disk Placement Group resides.
	Zone *string `pulumi:"zone"`
}

type ComputeDiskPlacementGroupState struct {
	CreatedAt pulumi.StringPtrInput
	// A description of the Disk Placement Group.
	Description pulumi.StringPtrInput
	// Folder that the resource belongs to. If value is omitted, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs to assign to the Disk Placement Group.
	Labels pulumi.StringMapInput
	// The name of the Disk Placement Group.
	Name pulumi.StringPtrInput
	// Status of the Disk Placement Group.
	Status pulumi.StringPtrInput
	// ID of the zone where the Disk Placement Group resides.
	Zone pulumi.StringPtrInput
}

func (ComputeDiskPlacementGroupState) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskPlacementGroupState)(nil)).Elem()
}

type computeDiskPlacementGroupArgs struct {
	// A description of the Disk Placement Group.
	Description *string `pulumi:"description"`
	// Folder that the resource belongs to. If value is omitted, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the Disk Placement Group.
	Labels map[string]string `pulumi:"labels"`
	// The name of the Disk Placement Group.
	Name *string `pulumi:"name"`
	// ID of the zone where the Disk Placement Group resides.
	Zone *string `pulumi:"zone"`
}

// The set of arguments for constructing a ComputeDiskPlacementGroup resource.
type ComputeDiskPlacementGroupArgs struct {
	// A description of the Disk Placement Group.
	Description pulumi.StringPtrInput
	// Folder that the resource belongs to. If value is omitted, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs to assign to the Disk Placement Group.
	Labels pulumi.StringMapInput
	// The name of the Disk Placement Group.
	Name pulumi.StringPtrInput
	// ID of the zone where the Disk Placement Group resides.
	Zone pulumi.StringPtrInput
}

func (ComputeDiskPlacementGroupArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*computeDiskPlacementGroupArgs)(nil)).Elem()
}

type ComputeDiskPlacementGroupInput interface {
	pulumi.Input

	ToComputeDiskPlacementGroupOutput() ComputeDiskPlacementGroupOutput
	ToComputeDiskPlacementGroupOutputWithContext(ctx context.Context) ComputeDiskPlacementGroupOutput
}

func (*ComputeDiskPlacementGroup) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeDiskPlacementGroup)(nil)).Elem()
}

func (i *ComputeDiskPlacementGroup) ToComputeDiskPlacementGroupOutput() ComputeDiskPlacementGroupOutput {
	return i.ToComputeDiskPlacementGroupOutputWithContext(context.Background())
}

func (i *ComputeDiskPlacementGroup) ToComputeDiskPlacementGroupOutputWithContext(ctx context.Context) ComputeDiskPlacementGroupOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeDiskPlacementGroupOutput)
}

// ComputeDiskPlacementGroupArrayInput is an input type that accepts ComputeDiskPlacementGroupArray and ComputeDiskPlacementGroupArrayOutput values.
// You can construct a concrete instance of `ComputeDiskPlacementGroupArrayInput` via:
//
//          ComputeDiskPlacementGroupArray{ ComputeDiskPlacementGroupArgs{...} }
type ComputeDiskPlacementGroupArrayInput interface {
	pulumi.Input

	ToComputeDiskPlacementGroupArrayOutput() ComputeDiskPlacementGroupArrayOutput
	ToComputeDiskPlacementGroupArrayOutputWithContext(context.Context) ComputeDiskPlacementGroupArrayOutput
}

type ComputeDiskPlacementGroupArray []ComputeDiskPlacementGroupInput

func (ComputeDiskPlacementGroupArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeDiskPlacementGroup)(nil)).Elem()
}

func (i ComputeDiskPlacementGroupArray) ToComputeDiskPlacementGroupArrayOutput() ComputeDiskPlacementGroupArrayOutput {
	return i.ToComputeDiskPlacementGroupArrayOutputWithContext(context.Background())
}

func (i ComputeDiskPlacementGroupArray) ToComputeDiskPlacementGroupArrayOutputWithContext(ctx context.Context) ComputeDiskPlacementGroupArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeDiskPlacementGroupArrayOutput)
}

// ComputeDiskPlacementGroupMapInput is an input type that accepts ComputeDiskPlacementGroupMap and ComputeDiskPlacementGroupMapOutput values.
// You can construct a concrete instance of `ComputeDiskPlacementGroupMapInput` via:
//
//          ComputeDiskPlacementGroupMap{ "key": ComputeDiskPlacementGroupArgs{...} }
type ComputeDiskPlacementGroupMapInput interface {
	pulumi.Input

	ToComputeDiskPlacementGroupMapOutput() ComputeDiskPlacementGroupMapOutput
	ToComputeDiskPlacementGroupMapOutputWithContext(context.Context) ComputeDiskPlacementGroupMapOutput
}

type ComputeDiskPlacementGroupMap map[string]ComputeDiskPlacementGroupInput

func (ComputeDiskPlacementGroupMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeDiskPlacementGroup)(nil)).Elem()
}

func (i ComputeDiskPlacementGroupMap) ToComputeDiskPlacementGroupMapOutput() ComputeDiskPlacementGroupMapOutput {
	return i.ToComputeDiskPlacementGroupMapOutputWithContext(context.Background())
}

func (i ComputeDiskPlacementGroupMap) ToComputeDiskPlacementGroupMapOutputWithContext(ctx context.Context) ComputeDiskPlacementGroupMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ComputeDiskPlacementGroupMapOutput)
}

type ComputeDiskPlacementGroupOutput struct{ *pulumi.OutputState }

func (ComputeDiskPlacementGroupOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ComputeDiskPlacementGroup)(nil)).Elem()
}

func (o ComputeDiskPlacementGroupOutput) ToComputeDiskPlacementGroupOutput() ComputeDiskPlacementGroupOutput {
	return o
}

func (o ComputeDiskPlacementGroupOutput) ToComputeDiskPlacementGroupOutputWithContext(ctx context.Context) ComputeDiskPlacementGroupOutput {
	return o
}

type ComputeDiskPlacementGroupArrayOutput struct{ *pulumi.OutputState }

func (ComputeDiskPlacementGroupArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ComputeDiskPlacementGroup)(nil)).Elem()
}

func (o ComputeDiskPlacementGroupArrayOutput) ToComputeDiskPlacementGroupArrayOutput() ComputeDiskPlacementGroupArrayOutput {
	return o
}

func (o ComputeDiskPlacementGroupArrayOutput) ToComputeDiskPlacementGroupArrayOutputWithContext(ctx context.Context) ComputeDiskPlacementGroupArrayOutput {
	return o
}

func (o ComputeDiskPlacementGroupArrayOutput) Index(i pulumi.IntInput) ComputeDiskPlacementGroupOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ComputeDiskPlacementGroup {
		return vs[0].([]*ComputeDiskPlacementGroup)[vs[1].(int)]
	}).(ComputeDiskPlacementGroupOutput)
}

type ComputeDiskPlacementGroupMapOutput struct{ *pulumi.OutputState }

func (ComputeDiskPlacementGroupMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ComputeDiskPlacementGroup)(nil)).Elem()
}

func (o ComputeDiskPlacementGroupMapOutput) ToComputeDiskPlacementGroupMapOutput() ComputeDiskPlacementGroupMapOutput {
	return o
}

func (o ComputeDiskPlacementGroupMapOutput) ToComputeDiskPlacementGroupMapOutputWithContext(ctx context.Context) ComputeDiskPlacementGroupMapOutput {
	return o
}

func (o ComputeDiskPlacementGroupMapOutput) MapIndex(k pulumi.StringInput) ComputeDiskPlacementGroupOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ComputeDiskPlacementGroup {
		return vs[0].(map[string]*ComputeDiskPlacementGroup)[vs[1].(string)]
	}).(ComputeDiskPlacementGroupOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeDiskPlacementGroupInput)(nil)).Elem(), &ComputeDiskPlacementGroup{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeDiskPlacementGroupArrayInput)(nil)).Elem(), ComputeDiskPlacementGroupArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ComputeDiskPlacementGroupMapInput)(nil)).Elem(), ComputeDiskPlacementGroupMap{})
	pulumi.RegisterOutputType(ComputeDiskPlacementGroupOutput{})
	pulumi.RegisterOutputType(ComputeDiskPlacementGroupArrayOutput{})
	pulumi.RegisterOutputType(ComputeDiskPlacementGroupMapOutput{})
}
