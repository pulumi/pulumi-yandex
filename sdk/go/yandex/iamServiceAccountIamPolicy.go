// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// When managing IAM roles, you can treat a service account either as a resource or as an identity.
// This resource is used to add IAM policy bindings to a service account resource to configure permissions
// that define who can edit the service account.
//
// There are three different resources that help you manage your IAM policy for a service account.
// Each of these resources is used for a different use case:
//
// * yandex_iam_service_account_iam_policy: Authoritative. Sets the IAM policy for the service account and replaces any existing policy already attached.
// * yandex_iam_service_account_iam_binding: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service account are preserved.
// * yandex_iam_service_account_iam_member: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role of the service account are preserved.
//
// > **Note:** `IamServiceAccountIamPolicy` **cannot** be used in conjunction with `IamServiceAccountIamBinding` and `IamServiceAccountIamMember` or they will conflict over what your policy should be.
//
// > **Note:** `IamServiceAccountIamBinding` resources **can be** used in conjunction with `IamServiceAccountIamMember` resources **only if** they do not grant privileges to the same role.
//
// ## yandex\_service\_account\_iam\_policy
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		admin, err := yandex.GetIamPolicy(ctx, &GetIamPolicyArgs{
// 			Bindings: []GetIamPolicyBinding{
// 				GetIamPolicyBinding{
// 					Members: []string{
// 						"userAccount:foobar_user_id",
// 					},
// 					Role: "admin",
// 				},
// 			},
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewIamServiceAccountIamPolicy(ctx, "admin-account-iam", &yandex.IamServiceAccountIamPolicyArgs{
// 			PolicyData:       pulumi.String(admin.PolicyData),
// 			ServiceAccountId: pulumi.String("your-service-account-id"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Service account IAM policy resources can be imported using the service account ID.
//
// ```sh
//  $ pulumi import yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy admin-account-iam service_account_id
// ```
type IamServiceAccountIamPolicy struct {
	pulumi.CustomResourceState

	// The policy data generated by
	// a `getIamPolicy` data source.
	PolicyData pulumi.StringOutput `pulumi:"policyData"`
	// The service account ID to apply a policy to.
	ServiceAccountId pulumi.StringOutput `pulumi:"serviceAccountId"`
}

// NewIamServiceAccountIamPolicy registers a new resource with the given unique name, arguments, and options.
func NewIamServiceAccountIamPolicy(ctx *pulumi.Context,
	name string, args *IamServiceAccountIamPolicyArgs, opts ...pulumi.ResourceOption) (*IamServiceAccountIamPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.PolicyData == nil {
		return nil, errors.New("invalid value for required argument 'PolicyData'")
	}
	if args.ServiceAccountId == nil {
		return nil, errors.New("invalid value for required argument 'ServiceAccountId'")
	}
	var resource IamServiceAccountIamPolicy
	err := ctx.RegisterResource("yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetIamServiceAccountIamPolicy gets an existing IamServiceAccountIamPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetIamServiceAccountIamPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *IamServiceAccountIamPolicyState, opts ...pulumi.ResourceOption) (*IamServiceAccountIamPolicy, error) {
	var resource IamServiceAccountIamPolicy
	err := ctx.ReadResource("yandex:index/iamServiceAccountIamPolicy:IamServiceAccountIamPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering IamServiceAccountIamPolicy resources.
type iamServiceAccountIamPolicyState struct {
	// The policy data generated by
	// a `getIamPolicy` data source.
	PolicyData *string `pulumi:"policyData"`
	// The service account ID to apply a policy to.
	ServiceAccountId *string `pulumi:"serviceAccountId"`
}

type IamServiceAccountIamPolicyState struct {
	// The policy data generated by
	// a `getIamPolicy` data source.
	PolicyData pulumi.StringPtrInput
	// The service account ID to apply a policy to.
	ServiceAccountId pulumi.StringPtrInput
}

func (IamServiceAccountIamPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*iamServiceAccountIamPolicyState)(nil)).Elem()
}

type iamServiceAccountIamPolicyArgs struct {
	// The policy data generated by
	// a `getIamPolicy` data source.
	PolicyData string `pulumi:"policyData"`
	// The service account ID to apply a policy to.
	ServiceAccountId string `pulumi:"serviceAccountId"`
}

// The set of arguments for constructing a IamServiceAccountIamPolicy resource.
type IamServiceAccountIamPolicyArgs struct {
	// The policy data generated by
	// a `getIamPolicy` data source.
	PolicyData pulumi.StringInput
	// The service account ID to apply a policy to.
	ServiceAccountId pulumi.StringInput
}

func (IamServiceAccountIamPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*iamServiceAccountIamPolicyArgs)(nil)).Elem()
}

type IamServiceAccountIamPolicyInput interface {
	pulumi.Input

	ToIamServiceAccountIamPolicyOutput() IamServiceAccountIamPolicyOutput
	ToIamServiceAccountIamPolicyOutputWithContext(ctx context.Context) IamServiceAccountIamPolicyOutput
}

func (*IamServiceAccountIamPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**IamServiceAccountIamPolicy)(nil)).Elem()
}

func (i *IamServiceAccountIamPolicy) ToIamServiceAccountIamPolicyOutput() IamServiceAccountIamPolicyOutput {
	return i.ToIamServiceAccountIamPolicyOutputWithContext(context.Background())
}

func (i *IamServiceAccountIamPolicy) ToIamServiceAccountIamPolicyOutputWithContext(ctx context.Context) IamServiceAccountIamPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamServiceAccountIamPolicyOutput)
}

// IamServiceAccountIamPolicyArrayInput is an input type that accepts IamServiceAccountIamPolicyArray and IamServiceAccountIamPolicyArrayOutput values.
// You can construct a concrete instance of `IamServiceAccountIamPolicyArrayInput` via:
//
//          IamServiceAccountIamPolicyArray{ IamServiceAccountIamPolicyArgs{...} }
type IamServiceAccountIamPolicyArrayInput interface {
	pulumi.Input

	ToIamServiceAccountIamPolicyArrayOutput() IamServiceAccountIamPolicyArrayOutput
	ToIamServiceAccountIamPolicyArrayOutputWithContext(context.Context) IamServiceAccountIamPolicyArrayOutput
}

type IamServiceAccountIamPolicyArray []IamServiceAccountIamPolicyInput

func (IamServiceAccountIamPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamServiceAccountIamPolicy)(nil)).Elem()
}

func (i IamServiceAccountIamPolicyArray) ToIamServiceAccountIamPolicyArrayOutput() IamServiceAccountIamPolicyArrayOutput {
	return i.ToIamServiceAccountIamPolicyArrayOutputWithContext(context.Background())
}

func (i IamServiceAccountIamPolicyArray) ToIamServiceAccountIamPolicyArrayOutputWithContext(ctx context.Context) IamServiceAccountIamPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamServiceAccountIamPolicyArrayOutput)
}

// IamServiceAccountIamPolicyMapInput is an input type that accepts IamServiceAccountIamPolicyMap and IamServiceAccountIamPolicyMapOutput values.
// You can construct a concrete instance of `IamServiceAccountIamPolicyMapInput` via:
//
//          IamServiceAccountIamPolicyMap{ "key": IamServiceAccountIamPolicyArgs{...} }
type IamServiceAccountIamPolicyMapInput interface {
	pulumi.Input

	ToIamServiceAccountIamPolicyMapOutput() IamServiceAccountIamPolicyMapOutput
	ToIamServiceAccountIamPolicyMapOutputWithContext(context.Context) IamServiceAccountIamPolicyMapOutput
}

type IamServiceAccountIamPolicyMap map[string]IamServiceAccountIamPolicyInput

func (IamServiceAccountIamPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamServiceAccountIamPolicy)(nil)).Elem()
}

func (i IamServiceAccountIamPolicyMap) ToIamServiceAccountIamPolicyMapOutput() IamServiceAccountIamPolicyMapOutput {
	return i.ToIamServiceAccountIamPolicyMapOutputWithContext(context.Background())
}

func (i IamServiceAccountIamPolicyMap) ToIamServiceAccountIamPolicyMapOutputWithContext(ctx context.Context) IamServiceAccountIamPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(IamServiceAccountIamPolicyMapOutput)
}

type IamServiceAccountIamPolicyOutput struct{ *pulumi.OutputState }

func (IamServiceAccountIamPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**IamServiceAccountIamPolicy)(nil)).Elem()
}

func (o IamServiceAccountIamPolicyOutput) ToIamServiceAccountIamPolicyOutput() IamServiceAccountIamPolicyOutput {
	return o
}

func (o IamServiceAccountIamPolicyOutput) ToIamServiceAccountIamPolicyOutputWithContext(ctx context.Context) IamServiceAccountIamPolicyOutput {
	return o
}

type IamServiceAccountIamPolicyArrayOutput struct{ *pulumi.OutputState }

func (IamServiceAccountIamPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*IamServiceAccountIamPolicy)(nil)).Elem()
}

func (o IamServiceAccountIamPolicyArrayOutput) ToIamServiceAccountIamPolicyArrayOutput() IamServiceAccountIamPolicyArrayOutput {
	return o
}

func (o IamServiceAccountIamPolicyArrayOutput) ToIamServiceAccountIamPolicyArrayOutputWithContext(ctx context.Context) IamServiceAccountIamPolicyArrayOutput {
	return o
}

func (o IamServiceAccountIamPolicyArrayOutput) Index(i pulumi.IntInput) IamServiceAccountIamPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *IamServiceAccountIamPolicy {
		return vs[0].([]*IamServiceAccountIamPolicy)[vs[1].(int)]
	}).(IamServiceAccountIamPolicyOutput)
}

type IamServiceAccountIamPolicyMapOutput struct{ *pulumi.OutputState }

func (IamServiceAccountIamPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*IamServiceAccountIamPolicy)(nil)).Elem()
}

func (o IamServiceAccountIamPolicyMapOutput) ToIamServiceAccountIamPolicyMapOutput() IamServiceAccountIamPolicyMapOutput {
	return o
}

func (o IamServiceAccountIamPolicyMapOutput) ToIamServiceAccountIamPolicyMapOutputWithContext(ctx context.Context) IamServiceAccountIamPolicyMapOutput {
	return o
}

func (o IamServiceAccountIamPolicyMapOutput) MapIndex(k pulumi.StringInput) IamServiceAccountIamPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *IamServiceAccountIamPolicy {
		return vs[0].(map[string]*IamServiceAccountIamPolicy)[vs[1].(string)]
	}).(IamServiceAccountIamPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*IamServiceAccountIamPolicyInput)(nil)).Elem(), &IamServiceAccountIamPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamServiceAccountIamPolicyArrayInput)(nil)).Elem(), IamServiceAccountIamPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*IamServiceAccountIamPolicyMapInput)(nil)).Elem(), IamServiceAccountIamPolicyMap{})
	pulumi.RegisterOutputType(IamServiceAccountIamPolicyOutput{})
	pulumi.RegisterOutputType(IamServiceAccountIamPolicyArrayOutput{})
	pulumi.RegisterOutputType(IamServiceAccountIamPolicyMapOutput{})
}
