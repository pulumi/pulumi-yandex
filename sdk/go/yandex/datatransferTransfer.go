// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Data Transfer transfer. For more information, see [the official documentation](https://cloud.yandex.com/docs/data-transfer/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		pgSource, err := yandex.NewDatatransferEndpoint(ctx, "pgSource", &yandex.DatatransferEndpointArgs{
// 			Settings: &DatatransferEndpointSettingsArgs{
// 				PostgresSource: &DatatransferEndpointSettingsPostgresSourceArgs{
// 					Connection: &DatatransferEndpointSettingsPostgresSourceConnectionArgs{
// 						OnPremise: &DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs{
// 							Hosts: pulumi.StringArray{
// 								pulumi.String("example.org"),
// 							},
// 							Port: pulumi.Int(5432),
// 						},
// 					},
// 					SlotGigabyteLagLimit: pulumi.Int(100),
// 					Database:             pulumi.String("db1"),
// 					User:                 pulumi.String("user1"),
// 					Password: &DatatransferEndpointSettingsPostgresSourcePasswordArgs{
// 						Raw: pulumi.String("123"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		pgTarget, err := yandex.NewDatatransferEndpoint(ctx, "pgTarget", &yandex.DatatransferEndpointArgs{
// 			FolderId: pulumi.String("some_folder_id"),
// 			Settings: &DatatransferEndpointSettingsArgs{
// 				PostgresTarget: &DatatransferEndpointSettingsPostgresTargetArgs{
// 					Connection: &DatatransferEndpointSettingsPostgresTargetConnectionArgs{
// 						MdbClusterId: pulumi.String("some_cluster_id"),
// 					},
// 					Database: pulumi.String("db2"),
// 					User:     pulumi.String("user2"),
// 					Password: &DatatransferEndpointSettingsPostgresTargetPasswordArgs{
// 						Raw: pulumi.String("321"),
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewDatatransferTransfer(ctx, "pgpgTransfer", &yandex.DatatransferTransferArgs{
// 			FolderId: pulumi.String("some_folder_id"),
// 			SourceId: pgSource.ID(),
// 			TargetId: pgTarget.ID(),
// 			Type:     pulumi.String("SNAPSHOT_AND_INCREMENT"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A transfer can be imported using the `id` of the resource, e.g.
//
// ```sh
//  $ pulumi import yandex:index/datatransferTransfer:DatatransferTransfer foo transfer_id
// ```
type DatatransferTransfer struct {
	pulumi.CustomResourceState

	// Arbitrary description text for the transfer.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the Data Transfer transfer.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the transfer.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the source endpoint for the transfer.
	SourceId pulumi.StringPtrOutput `pulumi:"sourceId"`
	// ID of the target endpoint for the transfer.
	TargetId pulumi.StringPtrOutput `pulumi:"targetId"`
	// Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
	Type pulumi.StringPtrOutput `pulumi:"type"`
	// (Computed) Error description if transfer has any errors.
	Warning pulumi.StringOutput `pulumi:"warning"`
}

// NewDatatransferTransfer registers a new resource with the given unique name, arguments, and options.
func NewDatatransferTransfer(ctx *pulumi.Context,
	name string, args *DatatransferTransferArgs, opts ...pulumi.ResourceOption) (*DatatransferTransfer, error) {
	if args == nil {
		args = &DatatransferTransferArgs{}
	}

	var resource DatatransferTransfer
	err := ctx.RegisterResource("yandex:index/datatransferTransfer:DatatransferTransfer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatatransferTransfer gets an existing DatatransferTransfer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatatransferTransfer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatatransferTransferState, opts ...pulumi.ResourceOption) (*DatatransferTransfer, error) {
	var resource DatatransferTransfer
	err := ctx.ReadResource("yandex:index/datatransferTransfer:DatatransferTransfer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatatransferTransfer resources.
type datatransferTransferState struct {
	// Arbitrary description text for the transfer.
	Description *string `pulumi:"description"`
	// ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the Data Transfer transfer.
	Labels map[string]string `pulumi:"labels"`
	// Name of the transfer.
	Name *string `pulumi:"name"`
	// ID of the source endpoint for the transfer.
	SourceId *string `pulumi:"sourceId"`
	// ID of the target endpoint for the transfer.
	TargetId *string `pulumi:"targetId"`
	// Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
	Type *string `pulumi:"type"`
	// (Computed) Error description if transfer has any errors.
	Warning *string `pulumi:"warning"`
}

type DatatransferTransferState struct {
	// Arbitrary description text for the transfer.
	Description pulumi.StringPtrInput
	// ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs to assign to the Data Transfer transfer.
	Labels pulumi.StringMapInput
	// Name of the transfer.
	Name pulumi.StringPtrInput
	// ID of the source endpoint for the transfer.
	SourceId pulumi.StringPtrInput
	// ID of the target endpoint for the transfer.
	TargetId pulumi.StringPtrInput
	// Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
	Type pulumi.StringPtrInput
	// (Computed) Error description if transfer has any errors.
	Warning pulumi.StringPtrInput
}

func (DatatransferTransferState) ElementType() reflect.Type {
	return reflect.TypeOf((*datatransferTransferState)(nil)).Elem()
}

type datatransferTransferArgs struct {
	// Arbitrary description text for the transfer.
	Description *string `pulumi:"description"`
	// ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the Data Transfer transfer.
	Labels map[string]string `pulumi:"labels"`
	// Name of the transfer.
	Name *string `pulumi:"name"`
	// ID of the source endpoint for the transfer.
	SourceId *string `pulumi:"sourceId"`
	// ID of the target endpoint for the transfer.
	TargetId *string `pulumi:"targetId"`
	// Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
	Type *string `pulumi:"type"`
}

// The set of arguments for constructing a DatatransferTransfer resource.
type DatatransferTransferArgs struct {
	// Arbitrary description text for the transfer.
	Description pulumi.StringPtrInput
	// ID of the folder to create the transfer in. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs to assign to the Data Transfer transfer.
	Labels pulumi.StringMapInput
	// Name of the transfer.
	Name pulumi.StringPtrInput
	// ID of the source endpoint for the transfer.
	SourceId pulumi.StringPtrInput
	// ID of the target endpoint for the transfer.
	TargetId pulumi.StringPtrInput
	// Type of the transfer. One of "SNAPSHOT_ONLY", "INCREMENT_ONLY", "SNAPSHOT_AND_INCREMENT".
	Type pulumi.StringPtrInput
}

func (DatatransferTransferArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datatransferTransferArgs)(nil)).Elem()
}

type DatatransferTransferInput interface {
	pulumi.Input

	ToDatatransferTransferOutput() DatatransferTransferOutput
	ToDatatransferTransferOutputWithContext(ctx context.Context) DatatransferTransferOutput
}

func (*DatatransferTransfer) ElementType() reflect.Type {
	return reflect.TypeOf((**DatatransferTransfer)(nil)).Elem()
}

func (i *DatatransferTransfer) ToDatatransferTransferOutput() DatatransferTransferOutput {
	return i.ToDatatransferTransferOutputWithContext(context.Background())
}

func (i *DatatransferTransfer) ToDatatransferTransferOutputWithContext(ctx context.Context) DatatransferTransferOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatatransferTransferOutput)
}

// DatatransferTransferArrayInput is an input type that accepts DatatransferTransferArray and DatatransferTransferArrayOutput values.
// You can construct a concrete instance of `DatatransferTransferArrayInput` via:
//
//          DatatransferTransferArray{ DatatransferTransferArgs{...} }
type DatatransferTransferArrayInput interface {
	pulumi.Input

	ToDatatransferTransferArrayOutput() DatatransferTransferArrayOutput
	ToDatatransferTransferArrayOutputWithContext(context.Context) DatatransferTransferArrayOutput
}

type DatatransferTransferArray []DatatransferTransferInput

func (DatatransferTransferArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatatransferTransfer)(nil)).Elem()
}

func (i DatatransferTransferArray) ToDatatransferTransferArrayOutput() DatatransferTransferArrayOutput {
	return i.ToDatatransferTransferArrayOutputWithContext(context.Background())
}

func (i DatatransferTransferArray) ToDatatransferTransferArrayOutputWithContext(ctx context.Context) DatatransferTransferArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatatransferTransferArrayOutput)
}

// DatatransferTransferMapInput is an input type that accepts DatatransferTransferMap and DatatransferTransferMapOutput values.
// You can construct a concrete instance of `DatatransferTransferMapInput` via:
//
//          DatatransferTransferMap{ "key": DatatransferTransferArgs{...} }
type DatatransferTransferMapInput interface {
	pulumi.Input

	ToDatatransferTransferMapOutput() DatatransferTransferMapOutput
	ToDatatransferTransferMapOutputWithContext(context.Context) DatatransferTransferMapOutput
}

type DatatransferTransferMap map[string]DatatransferTransferInput

func (DatatransferTransferMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatatransferTransfer)(nil)).Elem()
}

func (i DatatransferTransferMap) ToDatatransferTransferMapOutput() DatatransferTransferMapOutput {
	return i.ToDatatransferTransferMapOutputWithContext(context.Background())
}

func (i DatatransferTransferMap) ToDatatransferTransferMapOutputWithContext(ctx context.Context) DatatransferTransferMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatatransferTransferMapOutput)
}

type DatatransferTransferOutput struct{ *pulumi.OutputState }

func (DatatransferTransferOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatatransferTransfer)(nil)).Elem()
}

func (o DatatransferTransferOutput) ToDatatransferTransferOutput() DatatransferTransferOutput {
	return o
}

func (o DatatransferTransferOutput) ToDatatransferTransferOutputWithContext(ctx context.Context) DatatransferTransferOutput {
	return o
}

type DatatransferTransferArrayOutput struct{ *pulumi.OutputState }

func (DatatransferTransferArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatatransferTransfer)(nil)).Elem()
}

func (o DatatransferTransferArrayOutput) ToDatatransferTransferArrayOutput() DatatransferTransferArrayOutput {
	return o
}

func (o DatatransferTransferArrayOutput) ToDatatransferTransferArrayOutputWithContext(ctx context.Context) DatatransferTransferArrayOutput {
	return o
}

func (o DatatransferTransferArrayOutput) Index(i pulumi.IntInput) DatatransferTransferOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatatransferTransfer {
		return vs[0].([]*DatatransferTransfer)[vs[1].(int)]
	}).(DatatransferTransferOutput)
}

type DatatransferTransferMapOutput struct{ *pulumi.OutputState }

func (DatatransferTransferMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatatransferTransfer)(nil)).Elem()
}

func (o DatatransferTransferMapOutput) ToDatatransferTransferMapOutput() DatatransferTransferMapOutput {
	return o
}

func (o DatatransferTransferMapOutput) ToDatatransferTransferMapOutputWithContext(ctx context.Context) DatatransferTransferMapOutput {
	return o
}

func (o DatatransferTransferMapOutput) MapIndex(k pulumi.StringInput) DatatransferTransferOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatatransferTransfer {
		return vs[0].(map[string]*DatatransferTransfer)[vs[1].(string)]
	}).(DatatransferTransferOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatatransferTransferInput)(nil)).Elem(), &DatatransferTransfer{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatatransferTransferArrayInput)(nil)).Elem(), DatatransferTransferArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatatransferTransferMapInput)(nil)).Elem(), DatatransferTransferMap{})
	pulumi.RegisterOutputType(DatatransferTransferOutput{})
	pulumi.RegisterOutputType(DatatransferTransferArrayOutput{})
	pulumi.RegisterOutputType(DatatransferTransferMapOutput{})
}
