// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an HTTP Router in the specified folder.
// For more information, see [the official documentation](https://cloud.yandex.com/en/docs/application-load-balancer/concepts/http-router).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := yandex.NewAlbHttpRouter(ctx, "tf-router", &yandex.AlbHttpRouterArgs{
// 			Labels: pulumi.StringMap{
// 				"empty-label": pulumi.String(""),
// 				"s": pulumi.String{
// 					nil,
// 				},
// 				"tf-label": pulumi.String("tf-label-value"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An HTTP Router can be imported using the `id` of the resource, e.g.
//
// ```sh
//  $ pulumi import yandex:index/albHttpRouter:AlbHttpRouter default http_router_id
// ```
type AlbHttpRouter struct {
	pulumi.CustomResourceState

	// The HTTP Router creation timestamp.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// An optional description of the HTTP Router. Provide this property when
	// you create the resource.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the folder to which the resource belongs.
	// If omitted, the provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Labels to assign to this HTTP Router. A list of key/value pairs.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewAlbHttpRouter registers a new resource with the given unique name, arguments, and options.
func NewAlbHttpRouter(ctx *pulumi.Context,
	name string, args *AlbHttpRouterArgs, opts ...pulumi.ResourceOption) (*AlbHttpRouter, error) {
	if args == nil {
		args = &AlbHttpRouterArgs{}
	}

	var resource AlbHttpRouter
	err := ctx.RegisterResource("yandex:index/albHttpRouter:AlbHttpRouter", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlbHttpRouter gets an existing AlbHttpRouter resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlbHttpRouter(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlbHttpRouterState, opts ...pulumi.ResourceOption) (*AlbHttpRouter, error) {
	var resource AlbHttpRouter
	err := ctx.ReadResource("yandex:index/albHttpRouter:AlbHttpRouter", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlbHttpRouter resources.
type albHttpRouterState struct {
	// The HTTP Router creation timestamp.
	CreatedAt *string `pulumi:"createdAt"`
	// An optional description of the HTTP Router. Provide this property when
	// you create the resource.
	Description *string `pulumi:"description"`
	// The ID of the folder to which the resource belongs.
	// If omitted, the provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Labels to assign to this HTTP Router. A list of key/value pairs.
	Labels map[string]string `pulumi:"labels"`
	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	Name *string `pulumi:"name"`
}

type AlbHttpRouterState struct {
	// The HTTP Router creation timestamp.
	CreatedAt pulumi.StringPtrInput
	// An optional description of the HTTP Router. Provide this property when
	// you create the resource.
	Description pulumi.StringPtrInput
	// The ID of the folder to which the resource belongs.
	// If omitted, the provider folder is used.
	FolderId pulumi.StringPtrInput
	// Labels to assign to this HTTP Router. A list of key/value pairs.
	Labels pulumi.StringMapInput
	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	Name pulumi.StringPtrInput
}

func (AlbHttpRouterState) ElementType() reflect.Type {
	return reflect.TypeOf((*albHttpRouterState)(nil)).Elem()
}

type albHttpRouterArgs struct {
	// An optional description of the HTTP Router. Provide this property when
	// you create the resource.
	Description *string `pulumi:"description"`
	// The ID of the folder to which the resource belongs.
	// If omitted, the provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Labels to assign to this HTTP Router. A list of key/value pairs.
	Labels map[string]string `pulumi:"labels"`
	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a AlbHttpRouter resource.
type AlbHttpRouterArgs struct {
	// An optional description of the HTTP Router. Provide this property when
	// you create the resource.
	Description pulumi.StringPtrInput
	// The ID of the folder to which the resource belongs.
	// If omitted, the provider folder is used.
	FolderId pulumi.StringPtrInput
	// Labels to assign to this HTTP Router. A list of key/value pairs.
	Labels pulumi.StringMapInput
	// Name of the HTTP Router. Provided by the client when the HTTP Router is created.
	Name pulumi.StringPtrInput
}

func (AlbHttpRouterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*albHttpRouterArgs)(nil)).Elem()
}

type AlbHttpRouterInput interface {
	pulumi.Input

	ToAlbHttpRouterOutput() AlbHttpRouterOutput
	ToAlbHttpRouterOutputWithContext(ctx context.Context) AlbHttpRouterOutput
}

func (*AlbHttpRouter) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbHttpRouter)(nil)).Elem()
}

func (i *AlbHttpRouter) ToAlbHttpRouterOutput() AlbHttpRouterOutput {
	return i.ToAlbHttpRouterOutputWithContext(context.Background())
}

func (i *AlbHttpRouter) ToAlbHttpRouterOutputWithContext(ctx context.Context) AlbHttpRouterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbHttpRouterOutput)
}

// AlbHttpRouterArrayInput is an input type that accepts AlbHttpRouterArray and AlbHttpRouterArrayOutput values.
// You can construct a concrete instance of `AlbHttpRouterArrayInput` via:
//
//          AlbHttpRouterArray{ AlbHttpRouterArgs{...} }
type AlbHttpRouterArrayInput interface {
	pulumi.Input

	ToAlbHttpRouterArrayOutput() AlbHttpRouterArrayOutput
	ToAlbHttpRouterArrayOutputWithContext(context.Context) AlbHttpRouterArrayOutput
}

type AlbHttpRouterArray []AlbHttpRouterInput

func (AlbHttpRouterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbHttpRouter)(nil)).Elem()
}

func (i AlbHttpRouterArray) ToAlbHttpRouterArrayOutput() AlbHttpRouterArrayOutput {
	return i.ToAlbHttpRouterArrayOutputWithContext(context.Background())
}

func (i AlbHttpRouterArray) ToAlbHttpRouterArrayOutputWithContext(ctx context.Context) AlbHttpRouterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbHttpRouterArrayOutput)
}

// AlbHttpRouterMapInput is an input type that accepts AlbHttpRouterMap and AlbHttpRouterMapOutput values.
// You can construct a concrete instance of `AlbHttpRouterMapInput` via:
//
//          AlbHttpRouterMap{ "key": AlbHttpRouterArgs{...} }
type AlbHttpRouterMapInput interface {
	pulumi.Input

	ToAlbHttpRouterMapOutput() AlbHttpRouterMapOutput
	ToAlbHttpRouterMapOutputWithContext(context.Context) AlbHttpRouterMapOutput
}

type AlbHttpRouterMap map[string]AlbHttpRouterInput

func (AlbHttpRouterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbHttpRouter)(nil)).Elem()
}

func (i AlbHttpRouterMap) ToAlbHttpRouterMapOutput() AlbHttpRouterMapOutput {
	return i.ToAlbHttpRouterMapOutputWithContext(context.Background())
}

func (i AlbHttpRouterMap) ToAlbHttpRouterMapOutputWithContext(ctx context.Context) AlbHttpRouterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbHttpRouterMapOutput)
}

type AlbHttpRouterOutput struct{ *pulumi.OutputState }

func (AlbHttpRouterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbHttpRouter)(nil)).Elem()
}

func (o AlbHttpRouterOutput) ToAlbHttpRouterOutput() AlbHttpRouterOutput {
	return o
}

func (o AlbHttpRouterOutput) ToAlbHttpRouterOutputWithContext(ctx context.Context) AlbHttpRouterOutput {
	return o
}

type AlbHttpRouterArrayOutput struct{ *pulumi.OutputState }

func (AlbHttpRouterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbHttpRouter)(nil)).Elem()
}

func (o AlbHttpRouterArrayOutput) ToAlbHttpRouterArrayOutput() AlbHttpRouterArrayOutput {
	return o
}

func (o AlbHttpRouterArrayOutput) ToAlbHttpRouterArrayOutputWithContext(ctx context.Context) AlbHttpRouterArrayOutput {
	return o
}

func (o AlbHttpRouterArrayOutput) Index(i pulumi.IntInput) AlbHttpRouterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlbHttpRouter {
		return vs[0].([]*AlbHttpRouter)[vs[1].(int)]
	}).(AlbHttpRouterOutput)
}

type AlbHttpRouterMapOutput struct{ *pulumi.OutputState }

func (AlbHttpRouterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbHttpRouter)(nil)).Elem()
}

func (o AlbHttpRouterMapOutput) ToAlbHttpRouterMapOutput() AlbHttpRouterMapOutput {
	return o
}

func (o AlbHttpRouterMapOutput) ToAlbHttpRouterMapOutputWithContext(ctx context.Context) AlbHttpRouterMapOutput {
	return o
}

func (o AlbHttpRouterMapOutput) MapIndex(k pulumi.StringInput) AlbHttpRouterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlbHttpRouter {
		return vs[0].(map[string]*AlbHttpRouter)[vs[1].(string)]
	}).(AlbHttpRouterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlbHttpRouterInput)(nil)).Elem(), &AlbHttpRouter{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbHttpRouterArrayInput)(nil)).Elem(), AlbHttpRouterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbHttpRouterMapInput)(nil)).Elem(), AlbHttpRouterMap{})
	pulumi.RegisterOutputType(AlbHttpRouterOutput{})
	pulumi.RegisterOutputType(AlbHttpRouterArrayOutput{})
	pulumi.RegisterOutputType(AlbHttpRouterMapOutput{})
}
