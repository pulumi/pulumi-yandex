// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a Data Transfer endpoint. For more information, see [the official documentation](https://cloud.yandex.com/docs/data-transfer/).
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := yandex.NewDatatransferEndpoint(ctx, "pgSource", &yandex.DatatransferEndpointArgs{
// 			Settings: &DatatransferEndpointSettingsArgs{
// 				PostgresSource: &DatatransferEndpointSettingsPostgresSourceArgs{
// 					Connection: &DatatransferEndpointSettingsPostgresSourceConnectionArgs{
// 						OnPremise: &DatatransferEndpointSettingsPostgresSourceConnectionOnPremiseArgs{
// 							Hosts: pulumi.StringArray{
// 								pulumi.String("example.org"),
// 							},
// 							Port: pulumi.Int(5432),
// 						},
// 					},
// 					Database: pulumi.String("db1"),
// 					Password: &DatatransferEndpointSettingsPostgresSourcePasswordArgs{
// 						Raw: pulumi.String("123"),
// 					},
// 					SlotGigabyteLagLimit: pulumi.Int(100),
// 					User:                 pulumi.String("user1"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewDatatransferEndpoint(ctx, "pgTarget", &yandex.DatatransferEndpointArgs{
// 			FolderId: pulumi.String("some_folder_id"),
// 			Settings: &DatatransferEndpointSettingsArgs{
// 				PostgresTarget: &DatatransferEndpointSettingsPostgresTargetArgs{
// 					Connection: &DatatransferEndpointSettingsPostgresTargetConnectionArgs{
// 						MdbClusterId: pulumi.String("some_cluster_id"),
// 					},
// 					Database: pulumi.String("db2"),
// 					Password: &DatatransferEndpointSettingsPostgresTargetPasswordArgs{
// 						Raw: pulumi.String("321"),
// 					},
// 					User: pulumi.String("user2"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An endpoint can be imported using the `id` of the resource, e.g.
//
// ```sh
//  $ pulumi import yandex:index/datatransferEndpoint:DatatransferEndpoint foo endpoint_id
// ```
type DatatransferEndpoint struct {
	pulumi.CustomResourceState

	// (Computed) Identifier of the IAM user account of the user who created the endpoint.
	Author pulumi.StringOutput `pulumi:"author"`
	// Arbitrary description text for the endpoint.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// Name of the endpoint.
	Name pulumi.StringOutput `pulumi:"name"`
	// Settings for the endpoint. The structure is documented below.
	Settings DatatransferEndpointSettingsPtrOutput `pulumi:"settings"`
}

// NewDatatransferEndpoint registers a new resource with the given unique name, arguments, and options.
func NewDatatransferEndpoint(ctx *pulumi.Context,
	name string, args *DatatransferEndpointArgs, opts ...pulumi.ResourceOption) (*DatatransferEndpoint, error) {
	if args == nil {
		args = &DatatransferEndpointArgs{}
	}

	var resource DatatransferEndpoint
	err := ctx.RegisterResource("yandex:index/datatransferEndpoint:DatatransferEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatatransferEndpoint gets an existing DatatransferEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatatransferEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatatransferEndpointState, opts ...pulumi.ResourceOption) (*DatatransferEndpoint, error) {
	var resource DatatransferEndpoint
	err := ctx.ReadResource("yandex:index/datatransferEndpoint:DatatransferEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatatransferEndpoint resources.
type datatransferEndpointState struct {
	// (Computed) Identifier of the IAM user account of the user who created the endpoint.
	Author *string `pulumi:"author"`
	// Arbitrary description text for the endpoint.
	Description *string `pulumi:"description"`
	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	Labels map[string]string `pulumi:"labels"`
	// Name of the endpoint.
	Name *string `pulumi:"name"`
	// Settings for the endpoint. The structure is documented below.
	Settings *DatatransferEndpointSettings `pulumi:"settings"`
}

type DatatransferEndpointState struct {
	// (Computed) Identifier of the IAM user account of the user who created the endpoint.
	Author pulumi.StringPtrInput
	// Arbitrary description text for the endpoint.
	Description pulumi.StringPtrInput
	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	Labels pulumi.StringMapInput
	// Name of the endpoint.
	Name pulumi.StringPtrInput
	// Settings for the endpoint. The structure is documented below.
	Settings DatatransferEndpointSettingsPtrInput
}

func (DatatransferEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*datatransferEndpointState)(nil)).Elem()
}

type datatransferEndpointArgs struct {
	// Arbitrary description text for the endpoint.
	Description *string `pulumi:"description"`
	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	Labels map[string]string `pulumi:"labels"`
	// Name of the endpoint.
	Name *string `pulumi:"name"`
	// Settings for the endpoint. The structure is documented below.
	Settings *DatatransferEndpointSettings `pulumi:"settings"`
}

// The set of arguments for constructing a DatatransferEndpoint resource.
type DatatransferEndpointArgs struct {
	// Arbitrary description text for the endpoint.
	Description pulumi.StringPtrInput
	// ID of the folder to create the endpoint in. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs to assign to the Data Transfer endpoint.
	Labels pulumi.StringMapInput
	// Name of the endpoint.
	Name pulumi.StringPtrInput
	// Settings for the endpoint. The structure is documented below.
	Settings DatatransferEndpointSettingsPtrInput
}

func (DatatransferEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*datatransferEndpointArgs)(nil)).Elem()
}

type DatatransferEndpointInput interface {
	pulumi.Input

	ToDatatransferEndpointOutput() DatatransferEndpointOutput
	ToDatatransferEndpointOutputWithContext(ctx context.Context) DatatransferEndpointOutput
}

func (*DatatransferEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**DatatransferEndpoint)(nil)).Elem()
}

func (i *DatatransferEndpoint) ToDatatransferEndpointOutput() DatatransferEndpointOutput {
	return i.ToDatatransferEndpointOutputWithContext(context.Background())
}

func (i *DatatransferEndpoint) ToDatatransferEndpointOutputWithContext(ctx context.Context) DatatransferEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatatransferEndpointOutput)
}

// DatatransferEndpointArrayInput is an input type that accepts DatatransferEndpointArray and DatatransferEndpointArrayOutput values.
// You can construct a concrete instance of `DatatransferEndpointArrayInput` via:
//
//          DatatransferEndpointArray{ DatatransferEndpointArgs{...} }
type DatatransferEndpointArrayInput interface {
	pulumi.Input

	ToDatatransferEndpointArrayOutput() DatatransferEndpointArrayOutput
	ToDatatransferEndpointArrayOutputWithContext(context.Context) DatatransferEndpointArrayOutput
}

type DatatransferEndpointArray []DatatransferEndpointInput

func (DatatransferEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatatransferEndpoint)(nil)).Elem()
}

func (i DatatransferEndpointArray) ToDatatransferEndpointArrayOutput() DatatransferEndpointArrayOutput {
	return i.ToDatatransferEndpointArrayOutputWithContext(context.Background())
}

func (i DatatransferEndpointArray) ToDatatransferEndpointArrayOutputWithContext(ctx context.Context) DatatransferEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatatransferEndpointArrayOutput)
}

// DatatransferEndpointMapInput is an input type that accepts DatatransferEndpointMap and DatatransferEndpointMapOutput values.
// You can construct a concrete instance of `DatatransferEndpointMapInput` via:
//
//          DatatransferEndpointMap{ "key": DatatransferEndpointArgs{...} }
type DatatransferEndpointMapInput interface {
	pulumi.Input

	ToDatatransferEndpointMapOutput() DatatransferEndpointMapOutput
	ToDatatransferEndpointMapOutputWithContext(context.Context) DatatransferEndpointMapOutput
}

type DatatransferEndpointMap map[string]DatatransferEndpointInput

func (DatatransferEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatatransferEndpoint)(nil)).Elem()
}

func (i DatatransferEndpointMap) ToDatatransferEndpointMapOutput() DatatransferEndpointMapOutput {
	return i.ToDatatransferEndpointMapOutputWithContext(context.Background())
}

func (i DatatransferEndpointMap) ToDatatransferEndpointMapOutputWithContext(ctx context.Context) DatatransferEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DatatransferEndpointMapOutput)
}

type DatatransferEndpointOutput struct{ *pulumi.OutputState }

func (DatatransferEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DatatransferEndpoint)(nil)).Elem()
}

func (o DatatransferEndpointOutput) ToDatatransferEndpointOutput() DatatransferEndpointOutput {
	return o
}

func (o DatatransferEndpointOutput) ToDatatransferEndpointOutputWithContext(ctx context.Context) DatatransferEndpointOutput {
	return o
}

type DatatransferEndpointArrayOutput struct{ *pulumi.OutputState }

func (DatatransferEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DatatransferEndpoint)(nil)).Elem()
}

func (o DatatransferEndpointArrayOutput) ToDatatransferEndpointArrayOutput() DatatransferEndpointArrayOutput {
	return o
}

func (o DatatransferEndpointArrayOutput) ToDatatransferEndpointArrayOutputWithContext(ctx context.Context) DatatransferEndpointArrayOutput {
	return o
}

func (o DatatransferEndpointArrayOutput) Index(i pulumi.IntInput) DatatransferEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DatatransferEndpoint {
		return vs[0].([]*DatatransferEndpoint)[vs[1].(int)]
	}).(DatatransferEndpointOutput)
}

type DatatransferEndpointMapOutput struct{ *pulumi.OutputState }

func (DatatransferEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DatatransferEndpoint)(nil)).Elem()
}

func (o DatatransferEndpointMapOutput) ToDatatransferEndpointMapOutput() DatatransferEndpointMapOutput {
	return o
}

func (o DatatransferEndpointMapOutput) ToDatatransferEndpointMapOutputWithContext(ctx context.Context) DatatransferEndpointMapOutput {
	return o
}

func (o DatatransferEndpointMapOutput) MapIndex(k pulumi.StringInput) DatatransferEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DatatransferEndpoint {
		return vs[0].(map[string]*DatatransferEndpoint)[vs[1].(string)]
	}).(DatatransferEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DatatransferEndpointInput)(nil)).Elem(), &DatatransferEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatatransferEndpointArrayInput)(nil)).Elem(), DatatransferEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DatatransferEndpointMapInput)(nil)).Elem(), DatatransferEndpointMap{})
	pulumi.RegisterOutputType(DatatransferEndpointOutput{})
	pulumi.RegisterOutputType(DatatransferEndpointArrayOutput{})
	pulumi.RegisterOutputType(DatatransferEndpointMapOutput{})
}
