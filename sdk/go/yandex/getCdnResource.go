// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Get information about a Yandex CDN Resource. For more information, see
// [the official documentation](https://cloud.yandex.ru/docs/cdn/concepts/resource).
//
// > **_NOTE:_**  CDN provider must be activated prior usage of CDN resources, either via UI console or via yc cli command: ```yc cdn provider activate --folder-id <folder-id> --type gcore```
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myResource, err := yandex.LookupCdnResource(ctx, &GetCdnResourceArgs{
// 			ResourceId: pulumi.StringRef("some resource id"),
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		ctx.Export("resourceCname", myResource.Cname)
// 		return nil
// 	})
// }
// ```
func LookupCdnResource(ctx *pulumi.Context, args *LookupCdnResourceArgs, opts ...pulumi.InvokeOption) (*LookupCdnResourceResult, error) {
	var rv LookupCdnResourceResult
	err := ctx.Invoke("yandex:index/getCdnResource:getCdnResource", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCdnResource.
type LookupCdnResourceArgs struct {
	// Flag to create Resource either in active or disabled state. True - the content from CDN is available to clients.
	Active *bool `pulumi:"active"`
	// CDN endpoint CNAME, must be unique among resources.
	Cname *string `pulumi:"cname"`
	// CDN Resource settings and options to tune CDN edge behavior.
	Options         *GetCdnResourceOptions `pulumi:"options"`
	OriginGroupId   *int                   `pulumi:"originGroupId"`
	OriginGroupName *string                `pulumi:"originGroupName"`
	OriginProtocol  *string                `pulumi:"originProtocol"`
	ResourceId      *string                `pulumi:"resourceId"`
	// list of secondary hostname strings.
	SecondaryHostnames []string                      `pulumi:"secondaryHostnames"`
	SslCertificate     *GetCdnResourceSslCertificate `pulumi:"sslCertificate"`
	UpdatedAt          *string                       `pulumi:"updatedAt"`
}

// A collection of values returned by getCdnResource.
type LookupCdnResourceResult struct {
	Active    *bool  `pulumi:"active"`
	Cname     string `pulumi:"cname"`
	CreatedAt string `pulumi:"createdAt"`
	FolderId  string `pulumi:"folderId"`
	// The provider-assigned unique ID for this managed resource.
	Id                 string                        `pulumi:"id"`
	Options            GetCdnResourceOptions         `pulumi:"options"`
	OriginGroupId      *int                          `pulumi:"originGroupId"`
	OriginGroupName    *string                       `pulumi:"originGroupName"`
	OriginProtocol     *string                       `pulumi:"originProtocol"`
	ResourceId         string                        `pulumi:"resourceId"`
	SecondaryHostnames []string                      `pulumi:"secondaryHostnames"`
	SslCertificate     *GetCdnResourceSslCertificate `pulumi:"sslCertificate"`
	UpdatedAt          string                        `pulumi:"updatedAt"`
}

func LookupCdnResourceOutput(ctx *pulumi.Context, args LookupCdnResourceOutputArgs, opts ...pulumi.InvokeOption) LookupCdnResourceResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCdnResourceResult, error) {
			args := v.(LookupCdnResourceArgs)
			r, err := LookupCdnResource(ctx, &args, opts...)
			var s LookupCdnResourceResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCdnResourceResultOutput)
}

// A collection of arguments for invoking getCdnResource.
type LookupCdnResourceOutputArgs struct {
	// Flag to create Resource either in active or disabled state. True - the content from CDN is available to clients.
	Active pulumi.BoolPtrInput `pulumi:"active"`
	// CDN endpoint CNAME, must be unique among resources.
	Cname pulumi.StringPtrInput `pulumi:"cname"`
	// CDN Resource settings and options to tune CDN edge behavior.
	Options         GetCdnResourceOptionsPtrInput `pulumi:"options"`
	OriginGroupId   pulumi.IntPtrInput            `pulumi:"originGroupId"`
	OriginGroupName pulumi.StringPtrInput         `pulumi:"originGroupName"`
	OriginProtocol  pulumi.StringPtrInput         `pulumi:"originProtocol"`
	ResourceId      pulumi.StringPtrInput         `pulumi:"resourceId"`
	// list of secondary hostname strings.
	SecondaryHostnames pulumi.StringArrayInput              `pulumi:"secondaryHostnames"`
	SslCertificate     GetCdnResourceSslCertificatePtrInput `pulumi:"sslCertificate"`
	UpdatedAt          pulumi.StringPtrInput                `pulumi:"updatedAt"`
}

func (LookupCdnResourceOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCdnResourceArgs)(nil)).Elem()
}

// A collection of values returned by getCdnResource.
type LookupCdnResourceResultOutput struct{ *pulumi.OutputState }

func (LookupCdnResourceResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCdnResourceResult)(nil)).Elem()
}

func (o LookupCdnResourceResultOutput) ToLookupCdnResourceResultOutput() LookupCdnResourceResultOutput {
	return o
}

func (o LookupCdnResourceResultOutput) ToLookupCdnResourceResultOutputWithContext(ctx context.Context) LookupCdnResourceResultOutput {
	return o
}

func (o LookupCdnResourceResultOutput) Active() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) *bool { return v.Active }).(pulumi.BoolPtrOutput)
}

func (o LookupCdnResourceResultOutput) Cname() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) string { return v.Cname }).(pulumi.StringOutput)
}

func (o LookupCdnResourceResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

func (o LookupCdnResourceResultOutput) FolderId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) string { return v.FolderId }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCdnResourceResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCdnResourceResultOutput) Options() GetCdnResourceOptionsOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) GetCdnResourceOptions { return v.Options }).(GetCdnResourceOptionsOutput)
}

func (o LookupCdnResourceResultOutput) OriginGroupId() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) *int { return v.OriginGroupId }).(pulumi.IntPtrOutput)
}

func (o LookupCdnResourceResultOutput) OriginGroupName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) *string { return v.OriginGroupName }).(pulumi.StringPtrOutput)
}

func (o LookupCdnResourceResultOutput) OriginProtocol() pulumi.StringPtrOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) *string { return v.OriginProtocol }).(pulumi.StringPtrOutput)
}

func (o LookupCdnResourceResultOutput) ResourceId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) string { return v.ResourceId }).(pulumi.StringOutput)
}

func (o LookupCdnResourceResultOutput) SecondaryHostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) []string { return v.SecondaryHostnames }).(pulumi.StringArrayOutput)
}

func (o LookupCdnResourceResultOutput) SslCertificate() GetCdnResourceSslCertificatePtrOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) *GetCdnResourceSslCertificate { return v.SslCertificate }).(GetCdnResourceSslCertificatePtrOutput)
}

func (o LookupCdnResourceResultOutput) UpdatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCdnResourceResult) string { return v.UpdatedAt }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCdnResourceResultOutput{})
}
