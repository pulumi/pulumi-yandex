// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates an Application Load Balancer in the specified folder. For more information, see
// [the official documentation](https://cloud.yandex.com/en/docs/application-load-balancer/concepts/application-load-balancer)
// .
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := yandex.NewAlbLoadBalancer(ctx, "test-balancer", &yandex.AlbLoadBalancerArgs{
// 			NetworkId: pulumi.Any(yandex_vpc_network.Test - network.Id),
// 			AllocationPolicy: &AlbLoadBalancerAllocationPolicyArgs{
// 				Locations: AlbLoadBalancerAllocationPolicyLocationArray{
// 					&AlbLoadBalancerAllocationPolicyLocationArgs{
// 						ZoneId:   pulumi.String("ru-central1-a"),
// 						SubnetId: pulumi.Any(yandex_vpc_subnet.Test - subnet.Id),
// 					},
// 				},
// 			},
// 			Listeners: AlbLoadBalancerListenerArray{
// 				&AlbLoadBalancerListenerArgs{
// 					Name: pulumi.String("my-listener"),
// 					Endpoints: AlbLoadBalancerListenerEndpointArray{
// 						&AlbLoadBalancerListenerEndpointArgs{
// 							Addresses: AlbLoadBalancerListenerEndpointAddressArray{
// 								&AlbLoadBalancerListenerEndpointAddressArgs{
// 									ExternalIpv4Address: nil,
// 								},
// 							},
// 							Ports: pulumi.IntArray{
// 								pulumi.Int(8080),
// 							},
// 						},
// 					},
// 					Http: &AlbLoadBalancerListenerHttpArgs{
// 						Handler: &AlbLoadBalancerListenerHttpHandlerArgs{
// 							HttpRouterId: pulumi.Any(yandex_alb_http_router.Test - router.Id),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// An Application Load Balancer can be imported using the `id` of the resource, e.g.
//
// ```sh
//  $ pulumi import yandex:index/albLoadBalancer:AlbLoadBalancer default load_balancer_id
// ```
type AlbLoadBalancer struct {
	pulumi.CustomResourceState

	// Allocation zones for the Load Balancer instance. The structure is documented below.
	AllocationPolicy AlbLoadBalancerAllocationPolicyOutput `pulumi:"allocationPolicy"`
	// The Load Balancer creation timestamp.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// An optional description of the Load Balancer.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// The ID of the folder to which the resource belongs. If omitted, the provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// Labels to assign to this Load Balancer. A list of key/value pairs.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// List of listeners for the Load Balancer. The structure is documented below.
	Listeners AlbLoadBalancerListenerArrayOutput `pulumi:"listeners"`
	// Cloud log group used by the Load Balancer to store access logs.
	LogGroupId pulumi.StringOutput `pulumi:"logGroupId"`
	// name of SNI match.
	Name pulumi.StringOutput `pulumi:"name"`
	// ID of the network that the Load Balancer is located at.
	NetworkId pulumi.StringOutput `pulumi:"networkId"`
	// ID of the region that the Load Balancer is located at.
	RegionId pulumi.StringPtrOutput `pulumi:"regionId"`
	// A list of ID's of security groups attached to the Load Balancer.
	SecurityGroupIds pulumi.StringArrayOutput `pulumi:"securityGroupIds"`
	// Status of the Load Balancer.
	Status pulumi.StringOutput `pulumi:"status"`
}

// NewAlbLoadBalancer registers a new resource with the given unique name, arguments, and options.
func NewAlbLoadBalancer(ctx *pulumi.Context,
	name string, args *AlbLoadBalancerArgs, opts ...pulumi.ResourceOption) (*AlbLoadBalancer, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AllocationPolicy == nil {
		return nil, errors.New("invalid value for required argument 'AllocationPolicy'")
	}
	if args.NetworkId == nil {
		return nil, errors.New("invalid value for required argument 'NetworkId'")
	}
	var resource AlbLoadBalancer
	err := ctx.RegisterResource("yandex:index/albLoadBalancer:AlbLoadBalancer", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAlbLoadBalancer gets an existing AlbLoadBalancer resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAlbLoadBalancer(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AlbLoadBalancerState, opts ...pulumi.ResourceOption) (*AlbLoadBalancer, error) {
	var resource AlbLoadBalancer
	err := ctx.ReadResource("yandex:index/albLoadBalancer:AlbLoadBalancer", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AlbLoadBalancer resources.
type albLoadBalancerState struct {
	// Allocation zones for the Load Balancer instance. The structure is documented below.
	AllocationPolicy *AlbLoadBalancerAllocationPolicy `pulumi:"allocationPolicy"`
	// The Load Balancer creation timestamp.
	CreatedAt *string `pulumi:"createdAt"`
	// An optional description of the Load Balancer.
	Description *string `pulumi:"description"`
	// The ID of the folder to which the resource belongs. If omitted, the provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Labels to assign to this Load Balancer. A list of key/value pairs.
	Labels map[string]string `pulumi:"labels"`
	// List of listeners for the Load Balancer. The structure is documented below.
	Listeners []AlbLoadBalancerListener `pulumi:"listeners"`
	// Cloud log group used by the Load Balancer to store access logs.
	LogGroupId *string `pulumi:"logGroupId"`
	// name of SNI match.
	Name *string `pulumi:"name"`
	// ID of the network that the Load Balancer is located at.
	NetworkId *string `pulumi:"networkId"`
	// ID of the region that the Load Balancer is located at.
	RegionId *string `pulumi:"regionId"`
	// A list of ID's of security groups attached to the Load Balancer.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
	// Status of the Load Balancer.
	Status *string `pulumi:"status"`
}

type AlbLoadBalancerState struct {
	// Allocation zones for the Load Balancer instance. The structure is documented below.
	AllocationPolicy AlbLoadBalancerAllocationPolicyPtrInput
	// The Load Balancer creation timestamp.
	CreatedAt pulumi.StringPtrInput
	// An optional description of the Load Balancer.
	Description pulumi.StringPtrInput
	// The ID of the folder to which the resource belongs. If omitted, the provider folder is used.
	FolderId pulumi.StringPtrInput
	// Labels to assign to this Load Balancer. A list of key/value pairs.
	Labels pulumi.StringMapInput
	// List of listeners for the Load Balancer. The structure is documented below.
	Listeners AlbLoadBalancerListenerArrayInput
	// Cloud log group used by the Load Balancer to store access logs.
	LogGroupId pulumi.StringPtrInput
	// name of SNI match.
	Name pulumi.StringPtrInput
	// ID of the network that the Load Balancer is located at.
	NetworkId pulumi.StringPtrInput
	// ID of the region that the Load Balancer is located at.
	RegionId pulumi.StringPtrInput
	// A list of ID's of security groups attached to the Load Balancer.
	SecurityGroupIds pulumi.StringArrayInput
	// Status of the Load Balancer.
	Status pulumi.StringPtrInput
}

func (AlbLoadBalancerState) ElementType() reflect.Type {
	return reflect.TypeOf((*albLoadBalancerState)(nil)).Elem()
}

type albLoadBalancerArgs struct {
	// Allocation zones for the Load Balancer instance. The structure is documented below.
	AllocationPolicy AlbLoadBalancerAllocationPolicy `pulumi:"allocationPolicy"`
	// An optional description of the Load Balancer.
	Description *string `pulumi:"description"`
	// The ID of the folder to which the resource belongs. If omitted, the provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// Labels to assign to this Load Balancer. A list of key/value pairs.
	Labels map[string]string `pulumi:"labels"`
	// List of listeners for the Load Balancer. The structure is documented below.
	Listeners []AlbLoadBalancerListener `pulumi:"listeners"`
	// name of SNI match.
	Name *string `pulumi:"name"`
	// ID of the network that the Load Balancer is located at.
	NetworkId string `pulumi:"networkId"`
	// ID of the region that the Load Balancer is located at.
	RegionId *string `pulumi:"regionId"`
	// A list of ID's of security groups attached to the Load Balancer.
	SecurityGroupIds []string `pulumi:"securityGroupIds"`
}

// The set of arguments for constructing a AlbLoadBalancer resource.
type AlbLoadBalancerArgs struct {
	// Allocation zones for the Load Balancer instance. The structure is documented below.
	AllocationPolicy AlbLoadBalancerAllocationPolicyInput
	// An optional description of the Load Balancer.
	Description pulumi.StringPtrInput
	// The ID of the folder to which the resource belongs. If omitted, the provider folder is used.
	FolderId pulumi.StringPtrInput
	// Labels to assign to this Load Balancer. A list of key/value pairs.
	Labels pulumi.StringMapInput
	// List of listeners for the Load Balancer. The structure is documented below.
	Listeners AlbLoadBalancerListenerArrayInput
	// name of SNI match.
	Name pulumi.StringPtrInput
	// ID of the network that the Load Balancer is located at.
	NetworkId pulumi.StringInput
	// ID of the region that the Load Balancer is located at.
	RegionId pulumi.StringPtrInput
	// A list of ID's of security groups attached to the Load Balancer.
	SecurityGroupIds pulumi.StringArrayInput
}

func (AlbLoadBalancerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*albLoadBalancerArgs)(nil)).Elem()
}

type AlbLoadBalancerInput interface {
	pulumi.Input

	ToAlbLoadBalancerOutput() AlbLoadBalancerOutput
	ToAlbLoadBalancerOutputWithContext(ctx context.Context) AlbLoadBalancerOutput
}

func (*AlbLoadBalancer) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbLoadBalancer)(nil)).Elem()
}

func (i *AlbLoadBalancer) ToAlbLoadBalancerOutput() AlbLoadBalancerOutput {
	return i.ToAlbLoadBalancerOutputWithContext(context.Background())
}

func (i *AlbLoadBalancer) ToAlbLoadBalancerOutputWithContext(ctx context.Context) AlbLoadBalancerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbLoadBalancerOutput)
}

// AlbLoadBalancerArrayInput is an input type that accepts AlbLoadBalancerArray and AlbLoadBalancerArrayOutput values.
// You can construct a concrete instance of `AlbLoadBalancerArrayInput` via:
//
//          AlbLoadBalancerArray{ AlbLoadBalancerArgs{...} }
type AlbLoadBalancerArrayInput interface {
	pulumi.Input

	ToAlbLoadBalancerArrayOutput() AlbLoadBalancerArrayOutput
	ToAlbLoadBalancerArrayOutputWithContext(context.Context) AlbLoadBalancerArrayOutput
}

type AlbLoadBalancerArray []AlbLoadBalancerInput

func (AlbLoadBalancerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbLoadBalancer)(nil)).Elem()
}

func (i AlbLoadBalancerArray) ToAlbLoadBalancerArrayOutput() AlbLoadBalancerArrayOutput {
	return i.ToAlbLoadBalancerArrayOutputWithContext(context.Background())
}

func (i AlbLoadBalancerArray) ToAlbLoadBalancerArrayOutputWithContext(ctx context.Context) AlbLoadBalancerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbLoadBalancerArrayOutput)
}

// AlbLoadBalancerMapInput is an input type that accepts AlbLoadBalancerMap and AlbLoadBalancerMapOutput values.
// You can construct a concrete instance of `AlbLoadBalancerMapInput` via:
//
//          AlbLoadBalancerMap{ "key": AlbLoadBalancerArgs{...} }
type AlbLoadBalancerMapInput interface {
	pulumi.Input

	ToAlbLoadBalancerMapOutput() AlbLoadBalancerMapOutput
	ToAlbLoadBalancerMapOutputWithContext(context.Context) AlbLoadBalancerMapOutput
}

type AlbLoadBalancerMap map[string]AlbLoadBalancerInput

func (AlbLoadBalancerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbLoadBalancer)(nil)).Elem()
}

func (i AlbLoadBalancerMap) ToAlbLoadBalancerMapOutput() AlbLoadBalancerMapOutput {
	return i.ToAlbLoadBalancerMapOutputWithContext(context.Background())
}

func (i AlbLoadBalancerMap) ToAlbLoadBalancerMapOutputWithContext(ctx context.Context) AlbLoadBalancerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AlbLoadBalancerMapOutput)
}

type AlbLoadBalancerOutput struct{ *pulumi.OutputState }

func (AlbLoadBalancerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AlbLoadBalancer)(nil)).Elem()
}

func (o AlbLoadBalancerOutput) ToAlbLoadBalancerOutput() AlbLoadBalancerOutput {
	return o
}

func (o AlbLoadBalancerOutput) ToAlbLoadBalancerOutputWithContext(ctx context.Context) AlbLoadBalancerOutput {
	return o
}

type AlbLoadBalancerArrayOutput struct{ *pulumi.OutputState }

func (AlbLoadBalancerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AlbLoadBalancer)(nil)).Elem()
}

func (o AlbLoadBalancerArrayOutput) ToAlbLoadBalancerArrayOutput() AlbLoadBalancerArrayOutput {
	return o
}

func (o AlbLoadBalancerArrayOutput) ToAlbLoadBalancerArrayOutputWithContext(ctx context.Context) AlbLoadBalancerArrayOutput {
	return o
}

func (o AlbLoadBalancerArrayOutput) Index(i pulumi.IntInput) AlbLoadBalancerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AlbLoadBalancer {
		return vs[0].([]*AlbLoadBalancer)[vs[1].(int)]
	}).(AlbLoadBalancerOutput)
}

type AlbLoadBalancerMapOutput struct{ *pulumi.OutputState }

func (AlbLoadBalancerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AlbLoadBalancer)(nil)).Elem()
}

func (o AlbLoadBalancerMapOutput) ToAlbLoadBalancerMapOutput() AlbLoadBalancerMapOutput {
	return o
}

func (o AlbLoadBalancerMapOutput) ToAlbLoadBalancerMapOutputWithContext(ctx context.Context) AlbLoadBalancerMapOutput {
	return o
}

func (o AlbLoadBalancerMapOutput) MapIndex(k pulumi.StringInput) AlbLoadBalancerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AlbLoadBalancer {
		return vs[0].(map[string]*AlbLoadBalancer)[vs[1].(string)]
	}).(AlbLoadBalancerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AlbLoadBalancerInput)(nil)).Elem(), &AlbLoadBalancer{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbLoadBalancerArrayInput)(nil)).Elem(), AlbLoadBalancerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AlbLoadBalancerMapInput)(nil)).Elem(), AlbLoadBalancerMap{})
	pulumi.RegisterOutputType(AlbLoadBalancerOutput{})
	pulumi.RegisterOutputType(AlbLoadBalancerArrayOutput{})
	pulumi.RegisterOutputType(AlbLoadBalancerMapOutput{})
}
