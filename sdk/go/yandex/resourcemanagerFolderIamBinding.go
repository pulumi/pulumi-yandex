// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Allows creation and management of a single binding within IAM policy for
// an existing Yandex Resource Manager folder.
//
// > **Note:** This resource _must not_ be used in conjunction with
//    `ResourcemanagerFolderIamPolicy` or they will conflict over what your policy
//    should be.
//
// > **Note:** When you delete `ResourcemanagerFolderIamBinding` resource,
//    the roles can be deleted from other users within the folder as well. Be careful!
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		opt0 := "some_folder_id"
// 		project1, err := yandex.LookupResourcemanagerFolder(ctx, &GetResourcemanagerFolderArgs{
// 			FolderId: &opt0,
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewResourcemanagerFolderIamBinding(ctx, "admin", &yandex.ResourcemanagerFolderIamBindingArgs{
// 			FolderId: pulumi.String(project1.Id),
// 			Members: pulumi.StringArray{
// 				pulumi.String("userAccount:some_user_id"),
// 			},
// 			Role: pulumi.String("editor"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// IAM binding imports use space-delimited identifiers; first the resource in question and then the role. These bindings can be imported using the `folder_id` and role, e.g.
//
// ```sh
//  $ pulumi import yandex:index/resourcemanagerFolderIamBinding:ResourcemanagerFolderIamBinding viewer "folder_id viewer"
// ```
type ResourcemanagerFolderIamBinding struct {
	pulumi.CustomResourceState

	// ID of the folder to attach a policy to.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// An array of identities that will be granted the privilege that is specified in the `role` field.
	// Each entry can have one of the following values:
	// * **userAccount:{user_id}**: An email address that represents a specific Yandex account. For example, ivan@yandex.ru or joe@example.com.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	Members pulumi.StringArrayOutput `pulumi:"members"`
	// The role that should be assigned. Only one
	// `ResourcemanagerFolderIamBinding` can be used per role.
	Role       pulumi.StringOutput `pulumi:"role"`
	SleepAfter pulumi.IntPtrOutput `pulumi:"sleepAfter"`
}

// NewResourcemanagerFolderIamBinding registers a new resource with the given unique name, arguments, and options.
func NewResourcemanagerFolderIamBinding(ctx *pulumi.Context,
	name string, args *ResourcemanagerFolderIamBindingArgs, opts ...pulumi.ResourceOption) (*ResourcemanagerFolderIamBinding, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.FolderId == nil {
		return nil, errors.New("invalid value for required argument 'FolderId'")
	}
	if args.Members == nil {
		return nil, errors.New("invalid value for required argument 'Members'")
	}
	if args.Role == nil {
		return nil, errors.New("invalid value for required argument 'Role'")
	}
	var resource ResourcemanagerFolderIamBinding
	err := ctx.RegisterResource("yandex:index/resourcemanagerFolderIamBinding:ResourcemanagerFolderIamBinding", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetResourcemanagerFolderIamBinding gets an existing ResourcemanagerFolderIamBinding resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetResourcemanagerFolderIamBinding(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ResourcemanagerFolderIamBindingState, opts ...pulumi.ResourceOption) (*ResourcemanagerFolderIamBinding, error) {
	var resource ResourcemanagerFolderIamBinding
	err := ctx.ReadResource("yandex:index/resourcemanagerFolderIamBinding:ResourcemanagerFolderIamBinding", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ResourcemanagerFolderIamBinding resources.
type resourcemanagerFolderIamBindingState struct {
	// ID of the folder to attach a policy to.
	FolderId *string `pulumi:"folderId"`
	// An array of identities that will be granted the privilege that is specified in the `role` field.
	// Each entry can have one of the following values:
	// * **userAccount:{user_id}**: An email address that represents a specific Yandex account. For example, ivan@yandex.ru or joe@example.com.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	Members []string `pulumi:"members"`
	// The role that should be assigned. Only one
	// `ResourcemanagerFolderIamBinding` can be used per role.
	Role       *string `pulumi:"role"`
	SleepAfter *int    `pulumi:"sleepAfter"`
}

type ResourcemanagerFolderIamBindingState struct {
	// ID of the folder to attach a policy to.
	FolderId pulumi.StringPtrInput
	// An array of identities that will be granted the privilege that is specified in the `role` field.
	// Each entry can have one of the following values:
	// * **userAccount:{user_id}**: An email address that represents a specific Yandex account. For example, ivan@yandex.ru or joe@example.com.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	Members pulumi.StringArrayInput
	// The role that should be assigned. Only one
	// `ResourcemanagerFolderIamBinding` can be used per role.
	Role       pulumi.StringPtrInput
	SleepAfter pulumi.IntPtrInput
}

func (ResourcemanagerFolderIamBindingState) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcemanagerFolderIamBindingState)(nil)).Elem()
}

type resourcemanagerFolderIamBindingArgs struct {
	// ID of the folder to attach a policy to.
	FolderId string `pulumi:"folderId"`
	// An array of identities that will be granted the privilege that is specified in the `role` field.
	// Each entry can have one of the following values:
	// * **userAccount:{user_id}**: An email address that represents a specific Yandex account. For example, ivan@yandex.ru or joe@example.com.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	Members []string `pulumi:"members"`
	// The role that should be assigned. Only one
	// `ResourcemanagerFolderIamBinding` can be used per role.
	Role       string `pulumi:"role"`
	SleepAfter *int   `pulumi:"sleepAfter"`
}

// The set of arguments for constructing a ResourcemanagerFolderIamBinding resource.
type ResourcemanagerFolderIamBindingArgs struct {
	// ID of the folder to attach a policy to.
	FolderId pulumi.StringInput
	// An array of identities that will be granted the privilege that is specified in the `role` field.
	// Each entry can have one of the following values:
	// * **userAccount:{user_id}**: An email address that represents a specific Yandex account. For example, ivan@yandex.ru or joe@example.com.
	// * **serviceAccount:{service_account_id}**: A unique service account ID.
	Members pulumi.StringArrayInput
	// The role that should be assigned. Only one
	// `ResourcemanagerFolderIamBinding` can be used per role.
	Role       pulumi.StringInput
	SleepAfter pulumi.IntPtrInput
}

func (ResourcemanagerFolderIamBindingArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*resourcemanagerFolderIamBindingArgs)(nil)).Elem()
}

type ResourcemanagerFolderIamBindingInput interface {
	pulumi.Input

	ToResourcemanagerFolderIamBindingOutput() ResourcemanagerFolderIamBindingOutput
	ToResourcemanagerFolderIamBindingOutputWithContext(ctx context.Context) ResourcemanagerFolderIamBindingOutput
}

func (*ResourcemanagerFolderIamBinding) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcemanagerFolderIamBinding)(nil)).Elem()
}

func (i *ResourcemanagerFolderIamBinding) ToResourcemanagerFolderIamBindingOutput() ResourcemanagerFolderIamBindingOutput {
	return i.ToResourcemanagerFolderIamBindingOutputWithContext(context.Background())
}

func (i *ResourcemanagerFolderIamBinding) ToResourcemanagerFolderIamBindingOutputWithContext(ctx context.Context) ResourcemanagerFolderIamBindingOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcemanagerFolderIamBindingOutput)
}

// ResourcemanagerFolderIamBindingArrayInput is an input type that accepts ResourcemanagerFolderIamBindingArray and ResourcemanagerFolderIamBindingArrayOutput values.
// You can construct a concrete instance of `ResourcemanagerFolderIamBindingArrayInput` via:
//
//          ResourcemanagerFolderIamBindingArray{ ResourcemanagerFolderIamBindingArgs{...} }
type ResourcemanagerFolderIamBindingArrayInput interface {
	pulumi.Input

	ToResourcemanagerFolderIamBindingArrayOutput() ResourcemanagerFolderIamBindingArrayOutput
	ToResourcemanagerFolderIamBindingArrayOutputWithContext(context.Context) ResourcemanagerFolderIamBindingArrayOutput
}

type ResourcemanagerFolderIamBindingArray []ResourcemanagerFolderIamBindingInput

func (ResourcemanagerFolderIamBindingArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcemanagerFolderIamBinding)(nil)).Elem()
}

func (i ResourcemanagerFolderIamBindingArray) ToResourcemanagerFolderIamBindingArrayOutput() ResourcemanagerFolderIamBindingArrayOutput {
	return i.ToResourcemanagerFolderIamBindingArrayOutputWithContext(context.Background())
}

func (i ResourcemanagerFolderIamBindingArray) ToResourcemanagerFolderIamBindingArrayOutputWithContext(ctx context.Context) ResourcemanagerFolderIamBindingArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcemanagerFolderIamBindingArrayOutput)
}

// ResourcemanagerFolderIamBindingMapInput is an input type that accepts ResourcemanagerFolderIamBindingMap and ResourcemanagerFolderIamBindingMapOutput values.
// You can construct a concrete instance of `ResourcemanagerFolderIamBindingMapInput` via:
//
//          ResourcemanagerFolderIamBindingMap{ "key": ResourcemanagerFolderIamBindingArgs{...} }
type ResourcemanagerFolderIamBindingMapInput interface {
	pulumi.Input

	ToResourcemanagerFolderIamBindingMapOutput() ResourcemanagerFolderIamBindingMapOutput
	ToResourcemanagerFolderIamBindingMapOutputWithContext(context.Context) ResourcemanagerFolderIamBindingMapOutput
}

type ResourcemanagerFolderIamBindingMap map[string]ResourcemanagerFolderIamBindingInput

func (ResourcemanagerFolderIamBindingMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcemanagerFolderIamBinding)(nil)).Elem()
}

func (i ResourcemanagerFolderIamBindingMap) ToResourcemanagerFolderIamBindingMapOutput() ResourcemanagerFolderIamBindingMapOutput {
	return i.ToResourcemanagerFolderIamBindingMapOutputWithContext(context.Background())
}

func (i ResourcemanagerFolderIamBindingMap) ToResourcemanagerFolderIamBindingMapOutputWithContext(ctx context.Context) ResourcemanagerFolderIamBindingMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ResourcemanagerFolderIamBindingMapOutput)
}

type ResourcemanagerFolderIamBindingOutput struct{ *pulumi.OutputState }

func (ResourcemanagerFolderIamBindingOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ResourcemanagerFolderIamBinding)(nil)).Elem()
}

func (o ResourcemanagerFolderIamBindingOutput) ToResourcemanagerFolderIamBindingOutput() ResourcemanagerFolderIamBindingOutput {
	return o
}

func (o ResourcemanagerFolderIamBindingOutput) ToResourcemanagerFolderIamBindingOutputWithContext(ctx context.Context) ResourcemanagerFolderIamBindingOutput {
	return o
}

type ResourcemanagerFolderIamBindingArrayOutput struct{ *pulumi.OutputState }

func (ResourcemanagerFolderIamBindingArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ResourcemanagerFolderIamBinding)(nil)).Elem()
}

func (o ResourcemanagerFolderIamBindingArrayOutput) ToResourcemanagerFolderIamBindingArrayOutput() ResourcemanagerFolderIamBindingArrayOutput {
	return o
}

func (o ResourcemanagerFolderIamBindingArrayOutput) ToResourcemanagerFolderIamBindingArrayOutputWithContext(ctx context.Context) ResourcemanagerFolderIamBindingArrayOutput {
	return o
}

func (o ResourcemanagerFolderIamBindingArrayOutput) Index(i pulumi.IntInput) ResourcemanagerFolderIamBindingOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ResourcemanagerFolderIamBinding {
		return vs[0].([]*ResourcemanagerFolderIamBinding)[vs[1].(int)]
	}).(ResourcemanagerFolderIamBindingOutput)
}

type ResourcemanagerFolderIamBindingMapOutput struct{ *pulumi.OutputState }

func (ResourcemanagerFolderIamBindingMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ResourcemanagerFolderIamBinding)(nil)).Elem()
}

func (o ResourcemanagerFolderIamBindingMapOutput) ToResourcemanagerFolderIamBindingMapOutput() ResourcemanagerFolderIamBindingMapOutput {
	return o
}

func (o ResourcemanagerFolderIamBindingMapOutput) ToResourcemanagerFolderIamBindingMapOutputWithContext(ctx context.Context) ResourcemanagerFolderIamBindingMapOutput {
	return o
}

func (o ResourcemanagerFolderIamBindingMapOutput) MapIndex(k pulumi.StringInput) ResourcemanagerFolderIamBindingOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ResourcemanagerFolderIamBinding {
		return vs[0].(map[string]*ResourcemanagerFolderIamBinding)[vs[1].(string)]
	}).(ResourcemanagerFolderIamBindingOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcemanagerFolderIamBindingInput)(nil)).Elem(), &ResourcemanagerFolderIamBinding{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcemanagerFolderIamBindingArrayInput)(nil)).Elem(), ResourcemanagerFolderIamBindingArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ResourcemanagerFolderIamBindingMapInput)(nil)).Elem(), ResourcemanagerFolderIamBindingMap{})
	pulumi.RegisterOutputType(ResourcemanagerFolderIamBindingOutput{})
	pulumi.RegisterOutputType(ResourcemanagerFolderIamBindingArrayOutput{})
	pulumi.RegisterOutputType(ResourcemanagerFolderIamBindingMapOutput{})
}
