// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Creates a new container repository. For more information, see
// [the official documentation](https://cloud.yandex.com/docs/container-registry/concepts/repository)
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := yandex.NewContainerRegistry(ctx, "my-registry", nil)
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewContainerRepository(ctx, "my-repository", nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// A repository can be imported using the `id` of the resource, e.g.
//
// ```sh
//  $ pulumi import yandex:index/containerRepository:ContainerRepository my-repository repository_id
// ```
type ContainerRepository struct {
	pulumi.CustomResourceState

	// A name of the repository. The name of the repository should start with id of a container registry and match the name of the images that will be pushed in the repository.
	Name pulumi.StringOutput `pulumi:"name"`
}

// NewContainerRepository registers a new resource with the given unique name, arguments, and options.
func NewContainerRepository(ctx *pulumi.Context,
	name string, args *ContainerRepositoryArgs, opts ...pulumi.ResourceOption) (*ContainerRepository, error) {
	if args == nil {
		args = &ContainerRepositoryArgs{}
	}

	var resource ContainerRepository
	err := ctx.RegisterResource("yandex:index/containerRepository:ContainerRepository", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetContainerRepository gets an existing ContainerRepository resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetContainerRepository(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ContainerRepositoryState, opts ...pulumi.ResourceOption) (*ContainerRepository, error) {
	var resource ContainerRepository
	err := ctx.ReadResource("yandex:index/containerRepository:ContainerRepository", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ContainerRepository resources.
type containerRepositoryState struct {
	// A name of the repository. The name of the repository should start with id of a container registry and match the name of the images that will be pushed in the repository.
	Name *string `pulumi:"name"`
}

type ContainerRepositoryState struct {
	// A name of the repository. The name of the repository should start with id of a container registry and match the name of the images that will be pushed in the repository.
	Name pulumi.StringPtrInput
}

func (ContainerRepositoryState) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRepositoryState)(nil)).Elem()
}

type containerRepositoryArgs struct {
	// A name of the repository. The name of the repository should start with id of a container registry and match the name of the images that will be pushed in the repository.
	Name *string `pulumi:"name"`
}

// The set of arguments for constructing a ContainerRepository resource.
type ContainerRepositoryArgs struct {
	// A name of the repository. The name of the repository should start with id of a container registry and match the name of the images that will be pushed in the repository.
	Name pulumi.StringPtrInput
}

func (ContainerRepositoryArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*containerRepositoryArgs)(nil)).Elem()
}

type ContainerRepositoryInput interface {
	pulumi.Input

	ToContainerRepositoryOutput() ContainerRepositoryOutput
	ToContainerRepositoryOutputWithContext(ctx context.Context) ContainerRepositoryOutput
}

func (*ContainerRepository) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRepository)(nil)).Elem()
}

func (i *ContainerRepository) ToContainerRepositoryOutput() ContainerRepositoryOutput {
	return i.ToContainerRepositoryOutputWithContext(context.Background())
}

func (i *ContainerRepository) ToContainerRepositoryOutputWithContext(ctx context.Context) ContainerRepositoryOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRepositoryOutput)
}

// ContainerRepositoryArrayInput is an input type that accepts ContainerRepositoryArray and ContainerRepositoryArrayOutput values.
// You can construct a concrete instance of `ContainerRepositoryArrayInput` via:
//
//          ContainerRepositoryArray{ ContainerRepositoryArgs{...} }
type ContainerRepositoryArrayInput interface {
	pulumi.Input

	ToContainerRepositoryArrayOutput() ContainerRepositoryArrayOutput
	ToContainerRepositoryArrayOutputWithContext(context.Context) ContainerRepositoryArrayOutput
}

type ContainerRepositoryArray []ContainerRepositoryInput

func (ContainerRepositoryArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRepository)(nil)).Elem()
}

func (i ContainerRepositoryArray) ToContainerRepositoryArrayOutput() ContainerRepositoryArrayOutput {
	return i.ToContainerRepositoryArrayOutputWithContext(context.Background())
}

func (i ContainerRepositoryArray) ToContainerRepositoryArrayOutputWithContext(ctx context.Context) ContainerRepositoryArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRepositoryArrayOutput)
}

// ContainerRepositoryMapInput is an input type that accepts ContainerRepositoryMap and ContainerRepositoryMapOutput values.
// You can construct a concrete instance of `ContainerRepositoryMapInput` via:
//
//          ContainerRepositoryMap{ "key": ContainerRepositoryArgs{...} }
type ContainerRepositoryMapInput interface {
	pulumi.Input

	ToContainerRepositoryMapOutput() ContainerRepositoryMapOutput
	ToContainerRepositoryMapOutputWithContext(context.Context) ContainerRepositoryMapOutput
}

type ContainerRepositoryMap map[string]ContainerRepositoryInput

func (ContainerRepositoryMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRepository)(nil)).Elem()
}

func (i ContainerRepositoryMap) ToContainerRepositoryMapOutput() ContainerRepositoryMapOutput {
	return i.ToContainerRepositoryMapOutputWithContext(context.Background())
}

func (i ContainerRepositoryMap) ToContainerRepositoryMapOutputWithContext(ctx context.Context) ContainerRepositoryMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ContainerRepositoryMapOutput)
}

type ContainerRepositoryOutput struct{ *pulumi.OutputState }

func (ContainerRepositoryOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ContainerRepository)(nil)).Elem()
}

func (o ContainerRepositoryOutput) ToContainerRepositoryOutput() ContainerRepositoryOutput {
	return o
}

func (o ContainerRepositoryOutput) ToContainerRepositoryOutputWithContext(ctx context.Context) ContainerRepositoryOutput {
	return o
}

type ContainerRepositoryArrayOutput struct{ *pulumi.OutputState }

func (ContainerRepositoryArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ContainerRepository)(nil)).Elem()
}

func (o ContainerRepositoryArrayOutput) ToContainerRepositoryArrayOutput() ContainerRepositoryArrayOutput {
	return o
}

func (o ContainerRepositoryArrayOutput) ToContainerRepositoryArrayOutputWithContext(ctx context.Context) ContainerRepositoryArrayOutput {
	return o
}

func (o ContainerRepositoryArrayOutput) Index(i pulumi.IntInput) ContainerRepositoryOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ContainerRepository {
		return vs[0].([]*ContainerRepository)[vs[1].(int)]
	}).(ContainerRepositoryOutput)
}

type ContainerRepositoryMapOutput struct{ *pulumi.OutputState }

func (ContainerRepositoryMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ContainerRepository)(nil)).Elem()
}

func (o ContainerRepositoryMapOutput) ToContainerRepositoryMapOutput() ContainerRepositoryMapOutput {
	return o
}

func (o ContainerRepositoryMapOutput) ToContainerRepositoryMapOutputWithContext(ctx context.Context) ContainerRepositoryMapOutput {
	return o
}

func (o ContainerRepositoryMapOutput) MapIndex(k pulumi.StringInput) ContainerRepositoryOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ContainerRepository {
		return vs[0].(map[string]*ContainerRepository)[vs[1].(string)]
	}).(ContainerRepositoryOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRepositoryInput)(nil)).Elem(), &ContainerRepository{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRepositoryArrayInput)(nil)).Elem(), ContainerRepositoryArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ContainerRepositoryMapInput)(nil)).Elem(), ContainerRepositoryMap{})
	pulumi.RegisterOutputType(ContainerRepositoryOutput{})
	pulumi.RegisterOutputType(ContainerRepositoryArrayOutput{})
	pulumi.RegisterOutputType(ContainerRepositoryMapOutput{})
}
