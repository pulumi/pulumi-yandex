// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package yandex

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// Manages a DNS Zone.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-yandex/sdk/go/yandex"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		foo, err := yandex.NewVpcNetwork(ctx, "foo", nil)
// 		if err != nil {
// 			return err
// 		}
// 		zone1, err := yandex.NewDnsZone(ctx, "zone1", &yandex.DnsZoneArgs{
// 			Description: pulumi.String("desc"),
// 			Labels: pulumi.StringMap{
// 				"label1": pulumi.String("label-1-value"),
// 			},
// 			Zone:   pulumi.String("example.com."),
// 			Public: pulumi.Bool(false),
// 			PrivateNetworks: pulumi.StringArray{
// 				foo.ID(),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = yandex.NewDnsRecordSet(ctx, "rs1", &yandex.DnsRecordSetArgs{
// 			ZoneId: zone1.ID(),
// 			Type:   pulumi.String("A"),
// 			Ttl:    pulumi.Int(200),
// 			Datas: pulumi.StringArray{
// 				pulumi.String("10.1.0.1"),
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DnsZone struct {
	pulumi.CustomResourceState

	// (Computed) The DNS zone creation timestamp.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the DNS zone.
	Description pulumi.StringPtrOutput `pulumi:"description"`
	// ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringOutput `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the DNS zone.
	Labels pulumi.StringMapOutput `pulumi:"labels"`
	// User assigned name of a specific resource. Must be unique within the folder.
	Name pulumi.StringOutput `pulumi:"name"`
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateNetworks pulumi.StringArrayOutput `pulumi:"privateNetworks"`
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	Public pulumi.BoolOutput `pulumi:"public"`
	// The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	Zone pulumi.StringOutput `pulumi:"zone"`
}

// NewDnsZone registers a new resource with the given unique name, arguments, and options.
func NewDnsZone(ctx *pulumi.Context,
	name string, args *DnsZoneArgs, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.Zone == nil {
		return nil, errors.New("invalid value for required argument 'Zone'")
	}
	var resource DnsZone
	err := ctx.RegisterResource("yandex:index/dnsZone:DnsZone", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDnsZone gets an existing DnsZone resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDnsZone(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DnsZoneState, opts ...pulumi.ResourceOption) (*DnsZone, error) {
	var resource DnsZone
	err := ctx.ReadResource("yandex:index/dnsZone:DnsZone", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DnsZone resources.
type dnsZoneState struct {
	// (Computed) The DNS zone creation timestamp.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the DNS zone.
	Description *string `pulumi:"description"`
	// ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the DNS zone.
	Labels map[string]string `pulumi:"labels"`
	// User assigned name of a specific resource. Must be unique within the folder.
	Name *string `pulumi:"name"`
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateNetworks []string `pulumi:"privateNetworks"`
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	Public *bool `pulumi:"public"`
	// The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	Zone *string `pulumi:"zone"`
}

type DnsZoneState struct {
	// (Computed) The DNS zone creation timestamp.
	CreatedAt pulumi.StringPtrInput
	// Description of the DNS zone.
	Description pulumi.StringPtrInput
	// ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs to assign to the DNS zone.
	Labels pulumi.StringMapInput
	// User assigned name of a specific resource. Must be unique within the folder.
	Name pulumi.StringPtrInput
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateNetworks pulumi.StringArrayInput
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	Public pulumi.BoolPtrInput
	// The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	Zone pulumi.StringPtrInput
}

func (DnsZoneState) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneState)(nil)).Elem()
}

type dnsZoneArgs struct {
	// Description of the DNS zone.
	Description *string `pulumi:"description"`
	// ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	FolderId *string `pulumi:"folderId"`
	// A set of key/value label pairs to assign to the DNS zone.
	Labels map[string]string `pulumi:"labels"`
	// User assigned name of a specific resource. Must be unique within the folder.
	Name *string `pulumi:"name"`
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateNetworks []string `pulumi:"privateNetworks"`
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	Public *bool `pulumi:"public"`
	// The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	Zone string `pulumi:"zone"`
}

// The set of arguments for constructing a DnsZone resource.
type DnsZoneArgs struct {
	// Description of the DNS zone.
	Description pulumi.StringPtrInput
	// ID of the folder to create a zone in. If it is not provided, the default provider folder is used.
	FolderId pulumi.StringPtrInput
	// A set of key/value label pairs to assign to the DNS zone.
	Labels pulumi.StringMapInput
	// User assigned name of a specific resource. Must be unique within the folder.
	Name pulumi.StringPtrInput
	// For privately visible zones, the set of Virtual Private Cloud resources that the zone is visible from.
	PrivateNetworks pulumi.StringArrayInput
	// The zone's visibility: public zones are exposed to the Internet, while private zones are visible only to Virtual Private Cloud resources.
	Public pulumi.BoolPtrInput
	// The DNS name of this zone, e.g. "example.com.". Must ends with dot.
	Zone pulumi.StringInput
}

func (DnsZoneArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*dnsZoneArgs)(nil)).Elem()
}

type DnsZoneInput interface {
	pulumi.Input

	ToDnsZoneOutput() DnsZoneOutput
	ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput
}

func (*DnsZone) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZone)(nil)).Elem()
}

func (i *DnsZone) ToDnsZoneOutput() DnsZoneOutput {
	return i.ToDnsZoneOutputWithContext(context.Background())
}

func (i *DnsZone) ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneOutput)
}

// DnsZoneArrayInput is an input type that accepts DnsZoneArray and DnsZoneArrayOutput values.
// You can construct a concrete instance of `DnsZoneArrayInput` via:
//
//          DnsZoneArray{ DnsZoneArgs{...} }
type DnsZoneArrayInput interface {
	pulumi.Input

	ToDnsZoneArrayOutput() DnsZoneArrayOutput
	ToDnsZoneArrayOutputWithContext(context.Context) DnsZoneArrayOutput
}

type DnsZoneArray []DnsZoneInput

func (DnsZoneArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZone)(nil)).Elem()
}

func (i DnsZoneArray) ToDnsZoneArrayOutput() DnsZoneArrayOutput {
	return i.ToDnsZoneArrayOutputWithContext(context.Background())
}

func (i DnsZoneArray) ToDnsZoneArrayOutputWithContext(ctx context.Context) DnsZoneArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneArrayOutput)
}

// DnsZoneMapInput is an input type that accepts DnsZoneMap and DnsZoneMapOutput values.
// You can construct a concrete instance of `DnsZoneMapInput` via:
//
//          DnsZoneMap{ "key": DnsZoneArgs{...} }
type DnsZoneMapInput interface {
	pulumi.Input

	ToDnsZoneMapOutput() DnsZoneMapOutput
	ToDnsZoneMapOutputWithContext(context.Context) DnsZoneMapOutput
}

type DnsZoneMap map[string]DnsZoneInput

func (DnsZoneMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZone)(nil)).Elem()
}

func (i DnsZoneMap) ToDnsZoneMapOutput() DnsZoneMapOutput {
	return i.ToDnsZoneMapOutputWithContext(context.Background())
}

func (i DnsZoneMap) ToDnsZoneMapOutputWithContext(ctx context.Context) DnsZoneMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(DnsZoneMapOutput)
}

type DnsZoneOutput struct{ *pulumi.OutputState }

func (DnsZoneOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**DnsZone)(nil)).Elem()
}

func (o DnsZoneOutput) ToDnsZoneOutput() DnsZoneOutput {
	return o
}

func (o DnsZoneOutput) ToDnsZoneOutputWithContext(ctx context.Context) DnsZoneOutput {
	return o
}

type DnsZoneArrayOutput struct{ *pulumi.OutputState }

func (DnsZoneArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*DnsZone)(nil)).Elem()
}

func (o DnsZoneArrayOutput) ToDnsZoneArrayOutput() DnsZoneArrayOutput {
	return o
}

func (o DnsZoneArrayOutput) ToDnsZoneArrayOutputWithContext(ctx context.Context) DnsZoneArrayOutput {
	return o
}

func (o DnsZoneArrayOutput) Index(i pulumi.IntInput) DnsZoneOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *DnsZone {
		return vs[0].([]*DnsZone)[vs[1].(int)]
	}).(DnsZoneOutput)
}

type DnsZoneMapOutput struct{ *pulumi.OutputState }

func (DnsZoneMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*DnsZone)(nil)).Elem()
}

func (o DnsZoneMapOutput) ToDnsZoneMapOutput() DnsZoneMapOutput {
	return o
}

func (o DnsZoneMapOutput) ToDnsZoneMapOutputWithContext(ctx context.Context) DnsZoneMapOutput {
	return o
}

func (o DnsZoneMapOutput) MapIndex(k pulumi.StringInput) DnsZoneOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *DnsZone {
		return vs[0].(map[string]*DnsZone)[vs[1].(string)]
	}).(DnsZoneOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneInput)(nil)).Elem(), &DnsZone{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneArrayInput)(nil)).Elem(), DnsZoneArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*DnsZoneMapInput)(nil)).Elem(), DnsZoneMap{})
	pulumi.RegisterOutputType(DnsZoneOutput{})
	pulumi.RegisterOutputType(DnsZoneArrayOutput{})
	pulumi.RegisterOutputType(DnsZoneMapOutput{})
}
