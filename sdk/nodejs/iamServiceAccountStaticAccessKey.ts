// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Allows management of [Yandex.Cloud IAM service account static access keys](https://cloud.yandex.com/docs/iam/operations/sa/create-access-key).
 * Generated pair of keys is used to access [Yandex Object Storage](https://cloud.yandex.com/docs/storage) on behalf of service account.
 *
 * Before using keys do not forget to [assign a proper role](https://cloud.yandex.com/docs/iam/operations/sa/assign-role-for-sa) to the service account.
 *
 * ## Example Usage
 *
 * This snippet creates a service account static access key.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const sa_static_key = new yandex.IamServiceAccountStaticAccessKey("sa-static-key", {
 *     description: "static access key for object storage",
 *     pgpKey: "keybase:keybaseusername",
 *     serviceAccountId: "some_sa_id",
 * });
 * ```
 */
export class IamServiceAccountStaticAccessKey extends pulumi.CustomResource {
    /**
     * Get an existing IamServiceAccountStaticAccessKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: IamServiceAccountStaticAccessKeyState, opts?: pulumi.CustomResourceOptions): IamServiceAccountStaticAccessKey {
        return new IamServiceAccountStaticAccessKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/iamServiceAccountStaticAccessKey:IamServiceAccountStaticAccessKey';

    /**
     * Returns true if the given object is an instance of IamServiceAccountStaticAccessKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is IamServiceAccountStaticAccessKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === IamServiceAccountStaticAccessKey.__pulumiType;
    }

    /**
     * ID of the static access key.
     */
    public /*out*/ readonly accessKey!: pulumi.Output<string>;
    /**
     * Creation timestamp of the static access key.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * The description of the service account static key.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * The encrypted secret, base64 encoded. This is only populated when `pgpKey` is supplied.
     */
    public /*out*/ readonly encryptedSecretKey!: pulumi.Output<string>;
    /**
     * The fingerprint of the PGP key used to encrypt the secret key. This is only populated when `pgpKey` is supplied.
     */
    public /*out*/ readonly keyFingerprint!: pulumi.Output<string>;
    /**
     * An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.
     */
    public readonly pgpKey!: pulumi.Output<string | undefined>;
    /**
     * Private part of generated static access key. This is only populated when no `pgpKey` is provided.
     */
    public /*out*/ readonly secretKey!: pulumi.Output<string>;
    /**
     * ID of the service account which is used to get a static key.
     */
    public readonly serviceAccountId!: pulumi.Output<string>;

    /**
     * Create a IamServiceAccountStaticAccessKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: IamServiceAccountStaticAccessKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: IamServiceAccountStaticAccessKeyArgs | IamServiceAccountStaticAccessKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as IamServiceAccountStaticAccessKeyState | undefined;
            resourceInputs["accessKey"] = state ? state.accessKey : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["encryptedSecretKey"] = state ? state.encryptedSecretKey : undefined;
            resourceInputs["keyFingerprint"] = state ? state.keyFingerprint : undefined;
            resourceInputs["pgpKey"] = state ? state.pgpKey : undefined;
            resourceInputs["secretKey"] = state ? state.secretKey : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
        } else {
            const args = argsOrState as IamServiceAccountStaticAccessKeyArgs | undefined;
            if ((!args || args.serviceAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["pgpKey"] = args ? args.pgpKey : undefined;
            resourceInputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            resourceInputs["accessKey"] = undefined /*out*/;
            resourceInputs["createdAt"] = undefined /*out*/;
            resourceInputs["encryptedSecretKey"] = undefined /*out*/;
            resourceInputs["keyFingerprint"] = undefined /*out*/;
            resourceInputs["secretKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(IamServiceAccountStaticAccessKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering IamServiceAccountStaticAccessKey resources.
 */
export interface IamServiceAccountStaticAccessKeyState {
    /**
     * ID of the static access key.
     */
    accessKey?: pulumi.Input<string>;
    /**
     * Creation timestamp of the static access key.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * The description of the service account static key.
     */
    description?: pulumi.Input<string>;
    /**
     * The encrypted secret, base64 encoded. This is only populated when `pgpKey` is supplied.
     */
    encryptedSecretKey?: pulumi.Input<string>;
    /**
     * The fingerprint of the PGP key used to encrypt the secret key. This is only populated when `pgpKey` is supplied.
     */
    keyFingerprint?: pulumi.Input<string>;
    /**
     * An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.
     */
    pgpKey?: pulumi.Input<string>;
    /**
     * Private part of generated static access key. This is only populated when no `pgpKey` is provided.
     */
    secretKey?: pulumi.Input<string>;
    /**
     * ID of the service account which is used to get a static key.
     */
    serviceAccountId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a IamServiceAccountStaticAccessKey resource.
 */
export interface IamServiceAccountStaticAccessKeyArgs {
    /**
     * The description of the service account static key.
     */
    description?: pulumi.Input<string>;
    /**
     * An optional PGP key to encrypt the resulting secret key material. May either be a base64-encoded public key or a keybase username in the form `keybase:keybaseusername`.
     */
    pgpKey?: pulumi.Input<string>;
    /**
     * ID of the service account which is used to get a static key.
     */
    serviceAccountId: pulumi.Input<string>;
}
