// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Allows management of [Yandex Cloud Function Scaling Policies](https://cloud.yandex.com/docs/functions/)
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const myScalingPolicy = new yandex.FunctionScalingPolicy("my_scaling_policy", {
 *     functionId: "are1samplefunction11",
 *     policies: [
 *         {
 *             tag: "$latest",
 *             zoneInstancesLimit: 3,
 *             zoneRequestsLimit: 100,
 *         },
 *         {
 *             tag: "my_tag",
 *             zoneInstancesLimit: 4,
 *             zoneRequestsLimit: 150,
 *         },
 *     ],
 * });
 * ```
 */
export class FunctionScalingPolicy extends pulumi.CustomResource {
    /**
     * Get an existing FunctionScalingPolicy resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FunctionScalingPolicyState, opts?: pulumi.CustomResourceOptions): FunctionScalingPolicy {
        return new FunctionScalingPolicy(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/functionScalingPolicy:FunctionScalingPolicy';

    /**
     * Returns true if the given object is an instance of FunctionScalingPolicy.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FunctionScalingPolicy {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FunctionScalingPolicy.__pulumiType;
    }

    /**
     * Yandex Cloud Function id used to define function
     */
    public readonly functionId!: pulumi.Output<string>;
    /**
     * list definition for Yandex Cloud Function scaling policies
     * * `policy.#` - number of Yandex Cloud Function scaling policies
     * * `policy.{num}.tag` - Yandex.Cloud Function version tag for Yandex Cloud Function scaling policy
     * * `policy.{num}.zone_instances_limit` - max number of instances in one zone for Yandex.Cloud Function with tag
     * * `policy.{num}.zone_requests_limit` - max number of requests in one zone for Yandex.Cloud Function with tag
     */
    public readonly policies!: pulumi.Output<outputs.FunctionScalingPolicyPolicy[] | undefined>;

    /**
     * Create a FunctionScalingPolicy resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FunctionScalingPolicyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FunctionScalingPolicyArgs | FunctionScalingPolicyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FunctionScalingPolicyState | undefined;
            resourceInputs["functionId"] = state ? state.functionId : undefined;
            resourceInputs["policies"] = state ? state.policies : undefined;
        } else {
            const args = argsOrState as FunctionScalingPolicyArgs | undefined;
            if ((!args || args.functionId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'functionId'");
            }
            resourceInputs["functionId"] = args ? args.functionId : undefined;
            resourceInputs["policies"] = args ? args.policies : undefined;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(FunctionScalingPolicy.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FunctionScalingPolicy resources.
 */
export interface FunctionScalingPolicyState {
    /**
     * Yandex Cloud Function id used to define function
     */
    functionId?: pulumi.Input<string>;
    /**
     * list definition for Yandex Cloud Function scaling policies
     * * `policy.#` - number of Yandex Cloud Function scaling policies
     * * `policy.{num}.tag` - Yandex.Cloud Function version tag for Yandex Cloud Function scaling policy
     * * `policy.{num}.zone_instances_limit` - max number of instances in one zone for Yandex.Cloud Function with tag
     * * `policy.{num}.zone_requests_limit` - max number of requests in one zone for Yandex.Cloud Function with tag
     */
    policies?: pulumi.Input<pulumi.Input<inputs.FunctionScalingPolicyPolicy>[]>;
}

/**
 * The set of arguments for constructing a FunctionScalingPolicy resource.
 */
export interface FunctionScalingPolicyArgs {
    /**
     * Yandex Cloud Function id used to define function
     */
    functionId: pulumi.Input<string>;
    /**
     * list definition for Yandex Cloud Function scaling policies
     * * `policy.#` - number of Yandex Cloud Function scaling policies
     * * `policy.{num}.tag` - Yandex.Cloud Function version tag for Yandex Cloud Function scaling policy
     * * `policy.{num}.zone_instances_limit` - max number of instances in one zone for Yandex.Cloud Function with tag
     * * `policy.{num}.zone_requests_limit` - max number of requests in one zone for Yandex.Cloud Function with tag
     */
    policies?: pulumi.Input<pulumi.Input<inputs.FunctionScalingPolicyPolicy>[]>;
}
