// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * Allows creation and management of Cloud Folders for an existing Yandex Cloud. See [the official documentation](https://cloud.yandex.com/docs/resource-manager/concepts/resources-hierarchy) for additional info.
 * Note: deletion of folders may take up to 30 minutes as it requires a lot of communication between cloud services.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const folder1 = new yandex.ResourcemanagerFolder("folder1", {
 *     cloudId: "my_cloud_id",
 * });
 * ```
 */
export class ResourcemanagerFolder extends pulumi.CustomResource {
    /**
     * Get an existing ResourcemanagerFolder resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ResourcemanagerFolderState, opts?: pulumi.CustomResourceOptions): ResourcemanagerFolder {
        return new ResourcemanagerFolder(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/resourcemanagerFolder:ResourcemanagerFolder';

    /**
     * Returns true if the given object is an instance of ResourcemanagerFolder.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ResourcemanagerFolder {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ResourcemanagerFolder.__pulumiType;
    }

    /**
     * Cloud that the resource belongs to. If value is omitted, the default provider Cloud ID is used.
     */
    public readonly cloudId!: pulumi.Output<string>;
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * A description of the Folder.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * A set of key/value label pairs to assign to the Folder.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * The name of the Folder.
     */
    public readonly name!: pulumi.Output<string>;

    /**
     * Create a ResourcemanagerFolder resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: ResourcemanagerFolderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ResourcemanagerFolderArgs | ResourcemanagerFolderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ResourcemanagerFolderState | undefined;
            resourceInputs["cloudId"] = state ? state.cloudId : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
        } else {
            const args = argsOrState as ResourcemanagerFolderArgs | undefined;
            resourceInputs["cloudId"] = args ? args.cloudId : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        if (!opts.version) {
            opts = pulumi.mergeOptions(opts, { version: utilities.getVersion()});
        }
        super(ResourcemanagerFolder.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ResourcemanagerFolder resources.
 */
export interface ResourcemanagerFolderState {
    /**
     * Cloud that the resource belongs to. If value is omitted, the default provider Cloud ID is used.
     */
    cloudId?: pulumi.Input<string>;
    createdAt?: pulumi.Input<string>;
    /**
     * A description of the Folder.
     */
    description?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to the Folder.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Folder.
     */
    name?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ResourcemanagerFolder resource.
 */
export interface ResourcemanagerFolderArgs {
    /**
     * Cloud that the resource belongs to. If value is omitted, the default provider Cloud ID is used.
     */
    cloudId?: pulumi.Input<string>;
    /**
     * A description of the Folder.
     */
    description?: pulumi.Input<string>;
    /**
     * A set of key/value label pairs to assign to the Folder.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * The name of the Folder.
     */
    name?: pulumi.Input<string>;
}
