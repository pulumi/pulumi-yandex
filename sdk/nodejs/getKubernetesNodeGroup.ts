// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Get information about a Yandex Kubernetes Node Group. For more information, see
 * [the official documentation](https://cloud.yandex.com/docs/managed-kubernetes/concepts/#node-group).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 *
 * const myNodeGroup = pulumi.output(yandex.getKubernetesNodeGroup({
 *     nodeGroupId: "some_k8s_node_group_id",
 * }));
 *
 * export const my_node_group_status = myNodeGroup.status;
 * ```
 */
export function getKubernetesNodeGroup(args?: GetKubernetesNodeGroupArgs, opts?: pulumi.InvokeOptions): Promise<GetKubernetesNodeGroupResult> {
    args = args || {};
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("yandex:index/getKubernetesNodeGroup:getKubernetesNodeGroup", {
        "folderId": args.folderId,
        "name": args.name,
        "nodeGroupId": args.nodeGroupId,
    }, opts);
}

/**
 * A collection of arguments for invoking getKubernetesNodeGroup.
 */
export interface GetKubernetesNodeGroupArgs {
    /**
     * Folder that the resource belongs to. If value is omitted, the default provider folder is used.
     */
    folderId?: string;
    /**
     * Name of a specific Kubernetes node group.
     */
    name?: string;
    /**
     * ID of a specific Kubernetes node group.
     */
    nodeGroupId?: string;
}

/**
 * A collection of values returned by getKubernetesNodeGroup.
 */
export interface GetKubernetesNodeGroupResult {
    /**
     * This argument specify subnets (zones), that will be used by node group compute instances. The structure is documented below.
     */
    readonly allocationPolicies: outputs.GetKubernetesNodeGroupAllocationPolicy[];
    /**
     * A list of allowed unsafe sysctl parameters for this node group. For more details see [documentation](https://kubernetes.io/docs/tasks/administer-cluster/sysctl-cluster/).
     */
    readonly allowedUnsafeSysctls: string[];
    /**
     * The ID of the Kubernetes cluster that this node group belongs to.
     */
    readonly clusterId: string;
    /**
     * The Kubernetes node group creation timestamp.
     */
    readonly createdAt: string;
    /**
     * Deploy policy of the node group. The structure is documented below.
     */
    readonly deployPolicies: outputs.GetKubernetesNodeGroupDeployPolicy[];
    /**
     * A description of the Kubernetes node group.
     */
    readonly description: string;
    readonly folderId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * ID of instance group that is used to manage this Kubernetes node group.
     */
    readonly instanceGroupId: string;
    /**
     * Template used to create compute instances in this Kubernetes node group. The structure is documented below.
     */
    readonly instanceTemplates: outputs.GetKubernetesNodeGroupInstanceTemplate[];
    /**
     * A map of labels applied to this instance.
     * * `resources.0.memory` - The memory size allocated to the instance.
     * * `resources.0.cores` - Number of CPU cores allocated to the instance.
     * * `resources.0.core_fraction` - Baseline core performance as a percent.
     * * `resources.0.gpus` - Number of GPU cores allocated to the instance.
     */
    readonly labels: {[key: string]: string};
    /**
     * Information about maintenance policy for this Kubernetes node group. The structure is documented below.
     */
    readonly maintenancePolicies: outputs.GetKubernetesNodeGroupMaintenancePolicy[];
    readonly name: string;
    readonly nodeGroupId: string;
    /**
     * A set of key/value label pairs, that are assigned to all the nodes of this Kubernetes node group.
     */
    readonly nodeLabels: {[key: string]: string};
    /**
     * A list of Kubernetes taints, that are applied to all the nodes of this Kubernetes node group.
     */
    readonly nodeTaints: string[];
    /**
     * Scale policy of the node group. The structure is documented below.
     */
    readonly scalePolicies: outputs.GetKubernetesNodeGroupScalePolicy[];
    /**
     * Status of the Kubernetes node group.
     */
    readonly status: string;
    /**
     * Information about Kubernetes node group version. The structure is documented below.
     */
    readonly versionInfos: outputs.GetKubernetesNodeGroupVersionInfo[];
}

export function getKubernetesNodeGroupOutput(args?: GetKubernetesNodeGroupOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetKubernetesNodeGroupResult> {
    return pulumi.output(args).apply(a => getKubernetesNodeGroup(a, opts))
}

/**
 * A collection of arguments for invoking getKubernetesNodeGroup.
 */
export interface GetKubernetesNodeGroupOutputArgs {
    /**
     * Folder that the resource belongs to. If value is omitted, the default provider folder is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * Name of a specific Kubernetes node group.
     */
    name?: pulumi.Input<string>;
    /**
     * ID of a specific Kubernetes node group.
     */
    nodeGroupId?: pulumi.Input<string>;
}
