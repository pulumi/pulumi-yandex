// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * Manages a Data Proc cluster. For more information, see [the official documentation](https://cloud.yandex.com/docs/data-proc/).
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as yandex from "@pulumi/yandex";
 * import * from "fs";
 *
 * const fooVpcNetwork = new yandex.VpcNetwork("fooVpcNetwork", {});
 * const fooVpcSubnet = new yandex.VpcSubnet("fooVpcSubnet", {
 *     zone: "ru-central1-b",
 *     networkId: fooVpcNetwork.id,
 *     v4CidrBlocks: ["10.1.0.0/24"],
 * });
 * const dataprocIamServiceAccount = new yandex.IamServiceAccount("dataprocIamServiceAccount", {description: "service account to manage Dataproc Cluster"});
 * const fooResourcemanagerFolder = yandex.getResourcemanagerFolder({
 *     folderId: "some_folder_id",
 * });
 * const dataprocResourcemanagerFolderIamBinding = new yandex.ResourcemanagerFolderIamBinding("dataprocResourcemanagerFolderIamBinding", {
 *     folderId: fooResourcemanagerFolder.then(fooResourcemanagerFolder => fooResourcemanagerFolder.id),
 *     role: "mdb.dataproc.agent",
 *     members: [pulumi.interpolate`serviceAccount:${dataprocIamServiceAccount.id}`],
 * });
 * // required in order to create bucket
 * const bucket_creator = new yandex.ResourcemanagerFolderIamBinding("bucket-creator", {
 *     folderId: fooResourcemanagerFolder.then(fooResourcemanagerFolder => fooResourcemanagerFolder.id),
 *     role: "editor",
 *     members: [pulumi.interpolate`serviceAccount:${dataprocIamServiceAccount.id}`],
 * });
 * const fooIamServiceAccountStaticAccessKey = new yandex.IamServiceAccountStaticAccessKey("fooIamServiceAccountStaticAccessKey", {serviceAccountId: dataprocIamServiceAccount.id});
 * const fooStorageBucket = new yandex.StorageBucket("fooStorageBucket", {
 *     bucket: "foo",
 *     accessKey: fooIamServiceAccountStaticAccessKey.accessKey,
 *     secretKey: fooIamServiceAccountStaticAccessKey.secretKey,
 * }, {
 *     dependsOn: [bucket_creator],
 * });
 * const fooDataprocCluster = new yandex.DataprocCluster("fooDataprocCluster", {
 *     bucket: fooStorageBucket.bucket,
 *     description: "Dataproc Cluster created by Terraform",
 *     labels: {
 *         created_by: "terraform",
 *     },
 *     serviceAccountId: dataprocIamServiceAccount.id,
 *     zoneId: "ru-central1-b",
 *     clusterConfig: {
 *         hadoop: {
 *             services: [
 *                 "HDFS",
 *                 "YARN",
 *                 "SPARK",
 *                 "TEZ",
 *                 "MAPREDUCE",
 *                 "HIVE",
 *             ],
 *             properties: {
 *                 "yarn:yarn.resourcemanager.am.max-attempts": 5,
 *             },
 *             sshPublicKeys: [fs.readFileSync("~/.ssh/id_rsa.pub")],
 *         },
 *         subclusterSpecs: [
 *             {
 *                 name: "main",
 *                 role: "MASTERNODE",
 *                 resources: {
 *                     resourcePresetId: "s2.small",
 *                     diskTypeId: "network-hdd",
 *                     diskSize: 20,
 *                 },
 *                 subnetId: fooVpcSubnet.id,
 *                 hostsCount: 1,
 *             },
 *             {
 *                 name: "data",
 *                 role: "DATANODE",
 *                 resources: {
 *                     resourcePresetId: "s2.small",
 *                     diskTypeId: "network-hdd",
 *                     diskSize: 20,
 *                 },
 *                 subnetId: fooVpcSubnet.id,
 *                 hostsCount: 2,
 *             },
 *             {
 *                 name: "compute",
 *                 role: "COMPUTENODE",
 *                 resources: {
 *                     resourcePresetId: "s2.small",
 *                     diskTypeId: "network-hdd",
 *                     diskSize: 20,
 *                 },
 *                 subnetId: fooVpcSubnet.id,
 *                 hostsCount: 2,
 *             },
 *             {
 *                 name: "compute_autoscaling",
 *                 role: "COMPUTENODE",
 *                 resources: {
 *                     resourcePresetId: "s2.small",
 *                     diskTypeId: "network-hdd",
 *                     diskSize: 20,
 *                 },
 *                 subnetId: fooVpcSubnet.id,
 *                 hostsCount: 2,
 *                 autoscalingConfig: {
 *                     maxHostsCount: 10,
 *                     measurementDuration: 60,
 *                     warmupDuration: 60,
 *                     stabilizationDuration: 120,
 *                     preemptible: false,
 *                     decommissionTimeout: 60,
 *                 },
 *             },
 *         ],
 *     },
 * }, {
 *     dependsOn: [dataprocResourcemanagerFolderIamBinding],
 * });
 * ```
 *
 * ## Import
 *
 * A cluster can be imported using the `id` of the resource, e.g.
 *
 * ```sh
 *  $ pulumi import yandex:index/dataprocCluster:DataprocCluster foo cluster_id
 * ```
 */
export class DataprocCluster extends pulumi.CustomResource {
    /**
     * Get an existing DataprocCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataprocClusterState, opts?: pulumi.CustomResourceOptions): DataprocCluster {
        return new DataprocCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'yandex:index/dataprocCluster:DataprocCluster';

    /**
     * Returns true if the given object is an instance of DataprocCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataprocCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataprocCluster.__pulumiType;
    }

    /**
     * Name of the Object Storage bucket to use for Data Proc jobs. Data Proc Agent saves output of job driver's process to specified bucket. In order for this to work service account (specified by the `serviceAccountId` argument) should be given permission to create objects within this bucket.
     */
    public readonly bucket!: pulumi.Output<string | undefined>;
    /**
     * Configuration and resources for hosts that should be created with the cluster. The structure is documented below.
     */
    public readonly clusterConfig!: pulumi.Output<outputs.DataprocClusterClusterConfig>;
    /**
     * (Computed) The Data Proc cluster creation timestamp.
     * * `cluster_config.0.subcluster_spec.X.id` - (Computed) ID of the subcluster.
     */
    public /*out*/ readonly createdAt!: pulumi.Output<string>;
    /**
     * Inhibits deletion of the cluster.  Can be either `true` or `false`.
     */
    public readonly deletionProtection!: pulumi.Output<boolean>;
    /**
     * Description of the Data Proc cluster.
     */
    public readonly description!: pulumi.Output<string | undefined>;
    /**
     * ID of the folder to create a cluster in. If it is not provided, the default provider folder is used.
     */
    public readonly folderId!: pulumi.Output<string>;
    /**
     * A list of host group IDs to place VMs of the cluster on.
     */
    public readonly hostGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * A set of key/value label pairs to assign to the Data Proc cluster.
     */
    public readonly labels!: pulumi.Output<{[key: string]: string} | undefined>;
    /**
     * Name of the Data Proc subcluster.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * A list of security group IDs that the cluster belongs to.
     */
    public readonly securityGroupIds!: pulumi.Output<string[] | undefined>;
    /**
     * Service account to be used by the Data Proc agent to access resources of Yandex.Cloud. Selected service account should have `mdb.dataproc.agent` role on the folder where the Data Proc cluster will be located.
     */
    public readonly serviceAccountId!: pulumi.Output<string>;
    /**
     * Whether to enable UI Proxy feature.
     */
    public readonly uiProxy!: pulumi.Output<boolean | undefined>;
    /**
     * ID of the availability zone to create cluster in. If it is not provided, the default provider zone is used.
     */
    public readonly zoneId!: pulumi.Output<string>;

    /**
     * Create a DataprocCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataprocClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataprocClusterArgs | DataprocClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataprocClusterState | undefined;
            resourceInputs["bucket"] = state ? state.bucket : undefined;
            resourceInputs["clusterConfig"] = state ? state.clusterConfig : undefined;
            resourceInputs["createdAt"] = state ? state.createdAt : undefined;
            resourceInputs["deletionProtection"] = state ? state.deletionProtection : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["folderId"] = state ? state.folderId : undefined;
            resourceInputs["hostGroupIds"] = state ? state.hostGroupIds : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["securityGroupIds"] = state ? state.securityGroupIds : undefined;
            resourceInputs["serviceAccountId"] = state ? state.serviceAccountId : undefined;
            resourceInputs["uiProxy"] = state ? state.uiProxy : undefined;
            resourceInputs["zoneId"] = state ? state.zoneId : undefined;
        } else {
            const args = argsOrState as DataprocClusterArgs | undefined;
            if ((!args || args.clusterConfig === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterConfig'");
            }
            if ((!args || args.serviceAccountId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'serviceAccountId'");
            }
            resourceInputs["bucket"] = args ? args.bucket : undefined;
            resourceInputs["clusterConfig"] = args ? args.clusterConfig : undefined;
            resourceInputs["deletionProtection"] = args ? args.deletionProtection : undefined;
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["folderId"] = args ? args.folderId : undefined;
            resourceInputs["hostGroupIds"] = args ? args.hostGroupIds : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["securityGroupIds"] = args ? args.securityGroupIds : undefined;
            resourceInputs["serviceAccountId"] = args ? args.serviceAccountId : undefined;
            resourceInputs["uiProxy"] = args ? args.uiProxy : undefined;
            resourceInputs["zoneId"] = args ? args.zoneId : undefined;
            resourceInputs["createdAt"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataprocCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataprocCluster resources.
 */
export interface DataprocClusterState {
    /**
     * Name of the Object Storage bucket to use for Data Proc jobs. Data Proc Agent saves output of job driver's process to specified bucket. In order for this to work service account (specified by the `serviceAccountId` argument) should be given permission to create objects within this bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Configuration and resources for hosts that should be created with the cluster. The structure is documented below.
     */
    clusterConfig?: pulumi.Input<inputs.DataprocClusterClusterConfig>;
    /**
     * (Computed) The Data Proc cluster creation timestamp.
     * * `cluster_config.0.subcluster_spec.X.id` - (Computed) ID of the subcluster.
     */
    createdAt?: pulumi.Input<string>;
    /**
     * Inhibits deletion of the cluster.  Can be either `true` or `false`.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Description of the Data Proc cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the folder to create a cluster in. If it is not provided, the default provider folder is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A list of host group IDs to place VMs of the cluster on.
     */
    hostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of key/value label pairs to assign to the Data Proc cluster.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Data Proc subcluster.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of security group IDs that the cluster belongs to.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Service account to be used by the Data Proc agent to access resources of Yandex.Cloud. Selected service account should have `mdb.dataproc.agent` role on the folder where the Data Proc cluster will be located.
     */
    serviceAccountId?: pulumi.Input<string>;
    /**
     * Whether to enable UI Proxy feature.
     */
    uiProxy?: pulumi.Input<boolean>;
    /**
     * ID of the availability zone to create cluster in. If it is not provided, the default provider zone is used.
     */
    zoneId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a DataprocCluster resource.
 */
export interface DataprocClusterArgs {
    /**
     * Name of the Object Storage bucket to use for Data Proc jobs. Data Proc Agent saves output of job driver's process to specified bucket. In order for this to work service account (specified by the `serviceAccountId` argument) should be given permission to create objects within this bucket.
     */
    bucket?: pulumi.Input<string>;
    /**
     * Configuration and resources for hosts that should be created with the cluster. The structure is documented below.
     */
    clusterConfig: pulumi.Input<inputs.DataprocClusterClusterConfig>;
    /**
     * Inhibits deletion of the cluster.  Can be either `true` or `false`.
     */
    deletionProtection?: pulumi.Input<boolean>;
    /**
     * Description of the Data Proc cluster.
     */
    description?: pulumi.Input<string>;
    /**
     * ID of the folder to create a cluster in. If it is not provided, the default provider folder is used.
     */
    folderId?: pulumi.Input<string>;
    /**
     * A list of host group IDs to place VMs of the cluster on.
     */
    hostGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * A set of key/value label pairs to assign to the Data Proc cluster.
     */
    labels?: pulumi.Input<{[key: string]: pulumi.Input<string>}>;
    /**
     * Name of the Data Proc subcluster.
     */
    name?: pulumi.Input<string>;
    /**
     * A list of security group IDs that the cluster belongs to.
     */
    securityGroupIds?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Service account to be used by the Data Proc agent to access resources of Yandex.Cloud. Selected service account should have `mdb.dataproc.agent` role on the folder where the Data Proc cluster will be located.
     */
    serviceAccountId: pulumi.Input<string>;
    /**
     * Whether to enable UI Proxy feature.
     */
    uiProxy?: pulumi.Input<boolean>;
    /**
     * ID of the availability zone to create cluster in. If it is not provided, the default provider zone is used.
     */
    zoneId?: pulumi.Input<string>;
}
