// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

export function getMdbKafkaTopic(args: GetMdbKafkaTopicArgs, opts?: pulumi.InvokeOptions): Promise<GetMdbKafkaTopicResult> {
    if (!opts) {
        opts = {}
    }

    if (!opts.version) {
        opts.version = utilities.getVersion();
    }
    return pulumi.runtime.invoke("yandex:index/getMdbKafkaTopic:getMdbKafkaTopic", {
        "clusterId": args.clusterId,
        "name": args.name,
    }, opts);
}

/**
 * A collection of arguments for invoking getMdbKafkaTopic.
 */
export interface GetMdbKafkaTopicArgs {
    clusterId: string;
    name: string;
}

/**
 * A collection of values returned by getMdbKafkaTopic.
 */
export interface GetMdbKafkaTopicResult {
    readonly clusterId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly name: string;
    readonly partitions: number;
    readonly replicationFactor: number;
    readonly topicConfigs: outputs.GetMdbKafkaTopicTopicConfig[];
}

export function getMdbKafkaTopicOutput(args: GetMdbKafkaTopicOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetMdbKafkaTopicResult> {
    return pulumi.output(args).apply(a => getMdbKafkaTopic(a, opts))
}

/**
 * A collection of arguments for invoking getMdbKafkaTopic.
 */
export interface GetMdbKafkaTopicOutputArgs {
    clusterId: pulumi.Input<string>;
    name: pulumi.Input<string>;
}
